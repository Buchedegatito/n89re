
// ==================== SISTEMA DE COMPORTAMIENTO TÁCTICO ====================
// Inicializar sistema táctico
BE_AI_InitTacticalSystem = {
    [] spawn {
        while {BE_AI_SystemActive && BE_AI_UseTacticalBehaviors} do {
            {
                private _unit = _x;
                // Solo procesar unidades en combate y con IA completa
                if (alive _unit && 
                    behaviour _unit == "COMBAT" && 
                    _unit getVariable ["BE_AI_Level", ""] == "FULL" &&
                    !isPlayer _unit &&
                    !(_unit getVariable ["BE_AI_UsingTactics", false])) then {
                    
                    [_unit] spawn BE_AI_ApplyTacticalBehavior;
                };
                sleep 0.05; // Distribuir carga
            } forEach BE_AI_TrackedUnits;
            sleep 3;
        };
    };
};

// Aplicar comportamiento táctico a una unidad
BE_AI_ApplyTacticalBehavior = {
    params ["_unit"];
    
    // Evitar repetición
    if (_unit getVariable ["BE_AI_UsingTactics", false]) exitWith {};
    _unit setVariable ["BE_AI_UsingTactics", true];
    
    private _enemy = _unit findNearestEnemy _unit;
    if (isNull _enemy) exitWith {_unit setVariable ["BE_AI_UsingTactics", false]};
    
    private _enemyPos = getPosATL _enemy;
    private _unitPos = getPosATL _unit;
    
    // OPCIÓN 1: USAR EDIFICIO CERCANO
    if (random 100 < 65) then { // 65% de probabilidad
        private _buildings = nearestObjects [_unitPos, ["House", "Building"], BE_AI_BuildingSearchDistance];
        _buildings = _buildings select {count (_x buildingPos -1) > 0};
        
        if (count _buildings > 0) then {
            private _building = selectRandom _buildings;
            
            // Verificar si hay demasiadas unidades en este edificio
            private _unitsInBuilding = {_x distance _building < 10} count units group _unit;
            if (_unitsInBuilding < BE_AI_MaxUnitsPerBuilding) then {
                private _buildingPositions = _building buildingPos -1;
                
                // Encontrar posiciones con línea de visión al enemigo
                private _goodPositions = [];
                {
                    private _vis = [objNull, "VIEW"] checkVisibility [_x vectorAdd [0,0,1], _enemyPos vectorAdd [0,0,1.5]];
                    if (_vis > 0.2) then {_goodPositions pushBack _x};
                } forEach _buildingPositions;
                
                // Si no hay buenas posiciones, usar cualquiera
                if (count _goodPositions == 0) then {_goodPositions = _buildingPositions};
                
                // Elegir posición y moverse a ella
                private _targetPos = selectRandom _goodPositions;
                _unit doMove _targetPos;
                
                // Esperar a que llegue
                [_unit, _targetPos, _enemy] spawn {
                    params ["_unit", "_targetPos", "_enemy"];
                    private _timeout = time + 30;
                    waitUntil {sleep 0.5; _unit distance _targetPos < 2 || time > _timeout || !alive _unit};
                    
                    if (alive _unit) then {
                        // Tomar posición de disparo apropiada
                        _unit setUnitPos "MIDDLE";
                        _unit doWatch (getPosATL _enemy);
                        sleep (random 3 + 2);
                        
                        // Alternar entre agachado y de pie ocasionalmente
                        while {alive _unit && behaviour _unit == "COMBAT"} do {
                            _unit setUnitPos (selectRandom ["UP", "MIDDLE"]);
                            sleep (random 5 + 3);
                        };
                        
                        _unit setUnitPos "AUTO";
                    };
                    _unit setVariable ["BE_AI_UsingTactics", false];
                };
            } else {
                // Demasiadas unidades en el edificio, usar otro comportamiento
                [_unit, _enemy] call BE_AI_UseCoverTactic;
            };
        } else {
            // No hay edificios, usar cobertura
            [_unit, _enemy] call BE_AI_UseCoverTactic;
        };
    } else {
        // No elegimos edificio, usar cobertura
        [_unit, _enemy] call BE_AI_UseCoverTactic;
    };
};

// Táctica de uso de cobertura
BE_AI_UseCoverTactic = {
    params ["_unit", "_enemy"];
    
    private _enemyPos = getPosATL _enemy;
    private _unitPos = getPosATL _unit;
    private _enemyDir = _unitPos getDir _enemyPos;
    
    // Buscar objetos que puedan servir de cobertura
    private _covers = nearestObjects [_unitPos, ["ROCK", "WALL", "CAR", "HOUSE", "TREE", "SMALL TREE", "FENCE"], BE_AI_CoverSearchDistance];
    
    if (count _covers > 0) then {
        // Encontrar mejor cobertura (más cercana al soldado pero opuesta al enemigo)
        private _bestCover = objNull;
        private _bestScore = 0;
        
        {
            private _cover = _x;
            private _coverPos = getPosATL _cover;
            private _distToUnit = _unitPos distance _coverPos;
            private _distToEnemy = _enemyPos distance _coverPos;
            private _coverDir = _coverPos getDir _enemyPos;
            
            // Dirección opuesta al enemigo (para ponerse detrás de la cobertura)
            private _coverPosOpposite = [
                _coverPos select 0,
                _coverPos select 1,
                _coverPos select 2
            ];
            
            private _dirDiff = abs((_unitPos getDir _coverPos) - (_coverPos getDir _enemyPos));
            if (_dirDiff > 180) then {_dirDiff = 360 - _dirDiff};
            
            // Calcular puntuación (menor distancia unidad-cobertura, mayor distancia enemigo-cobertura)
            private _score = (30 / (_distToUnit max 1)) + (_distToEnemy / 10) + (_dirDiff / 10);
            
            if (_score > _bestScore) then {
                _bestScore = _score;
                _bestCover = _cover;
            };
        } forEach _covers;
        
        if (!isNull _bestCover) then {
            private _coverPos = getPosATL _bestCover;
            private _coverSize = sizeOf typeOf _bestCover;
            
            // Calcular posición detrás de la cobertura respecto al enemigo
            private _dirAwayFromEnemy = _coverPos getDir _enemyPos;
            private _targetPos = _coverPos getPos [(_coverSize / 2) + 1, _dirAwayFromEnemy];
            
            // Moverse a la cobertura
            _unit doMove _targetPos;
            
            // Comportamiento tras llegar a la cobertura
            [_unit, _targetPos, _enemy, _bestCover] spawn {
                params ["_unit", "_targetPos", "_enemy", "_cover"];
                private _timeout = time + 20;
                waitUntil {sleep 0.5; _unit distance _targetPos < 3 || time > _timeout || !alive _unit};
                
                if (alive _unit) then {
                    // Ponerse a cubierto y vigilar
                    _unit setUnitPos "MIDDLE";
                    _unit doWatch (getPosATL _enemy);
                    
                    // Salir y disparar ocasionalmente
                    while {alive _unit && behaviour _unit == "COMBAT" && _unit distance _cover < 5} do {
                        if (random 1 > 0.7) then {
                            _unit setUnitPos "UP";
                            sleep (0.5 + random 2);
                            _unit setUnitPos "MIDDLE";
                        };
                        sleep (random 3 + 1);
                    };
                    
                    _unit setUnitPos "AUTO";
                };
                _unit setVariable ["BE_AI_UsingTactics", false];
            };
        } else {
            // No hay buena cobertura, usar táctica de movimiento evasivo
            [_unit, _enemy] call BE_AI_UseFlankTactic;
        };
    } else {
        // No hay coberturas, intentar flanquear
        [_unit, _enemy] call BE_AI_UseFlankTactic;
    };
};

// Táctica de flanqueo
BE_AI_UseFlankTactic = {
    params ["_unit", "_enemy"];
    
    private _enemyPos = getPosATL _enemy;
    private _unitPos = getPosATL _unit;
    
    // Determinar dirección de flanqueo (derecha o izquierda)
    private _flankRight = random 1 > 0.5;
    private _baseDir = _enemyPos getDir _unitPos;
    private _flankAngle = _baseDir + (if (_flankRight) then {90} else {-90});
    
    // Calcular posición de flanqueo
    private _flankDist = 15 + random 10;
    private _flankPos = _enemyPos getPos [_flankDist, _flankAngle];
    
    // Moverse a posición de flanqueo
    _unit doMove _flankPos;
    
    // Comportamiento durante el flanqueo
    [_unit, _flankPos, _enemy] spawn {
        params ["_unit", "_flankPos", "_enemy"];
        private _timeout = time + 30;
        
        // Mientras se mueve, usar sprint y agacharse ocasionalmente
        while {alive _unit && _unit distance _flankPos > 3 && time < _timeout} do {
            if (random 1 > 0.7) then {_unit setUnitPos "DOWN"} else {_unit setUnitPos "UP"};
            sleep (0.5 + random 1);
        };
        
        if (alive _unit) then {
            // Al llegar, tomar postura de combate
            _unit setUnitPos "MIDDLE";
            _unit doWatch (getPosATL _enemy);
            sleep (1 + random 2);
        };
        
        _unit setUnitPos "AUTO";
        _unit setVariable ["BE_AI_UsingTactics", false];
    };
};

// ==================== SISTEMA DE ARMAMENTO ANTITANQUE ====================
// Función para inicializar el sistema de armamento AT
// ==================== SISTEMA DE ARMAMENTO ANTITANQUE ====================
// Función para inicializar el sistema de armamento AT
BE_AI_InitATWeaponSystem = {
    // Bucle principal para verificar uso táctico de AT
    [] spawn {
        while {BE_AI_SystemActive && BE_AI_UseATWeaponSystem} do {
            {
                private _unit = _x;
                // Solo procesar unidades vivas, en combate y no ocupadas con otra tarea
                if (alive _unit && 
                    !isPlayer _unit && 
                    behaviour _unit == "COMBAT" &&
                    !(_unit getVariable ["BE_AI_BusyWithAT", false])) then {
                    
                    // Verificar si debe usar un lanzamisiles que ya tiene
                    [_unit] call BE_AI_CheckUseATWeapon;
                    
                    // Verificar si hay un lanzamisiles cercano para recoger
                    [_unit] call BE_AI_CheckNearbyATWeapons;
                };
                sleep 0.05; // Distribuir procesamiento
            } forEach BE_AI_TrackedUnits;
            sleep BE_AI_ATWeaponCheckInterval;
        };
    };
};

// Comprobar si la unidad debe usar un lanzamisiles que ya tiene
BE_AI_CheckUseATWeapon = {
    params ["_unit"];
    
    // Verificar si tiene un lanzamisiles
    private _hasAT = false;
    private _atWeapon = "";
    private _atMags = [];
    
    // Comprobar si el arma secundaria es un AT
    private _secondaryWeapon = secondaryWeapon _unit;
    if (_secondaryWeapon != "" && {_secondaryWeapon in BE_AI_ATWeapons}) then {
        _hasAT = true;
        _atWeapon = _secondaryWeapon;
        // Obtener munición compatible
        _atMags = getArray (configFile >> "CfgWeapons" >> _atWeapon >> "magazines");
    };
    
    // Si no tiene AT, salir
    if (!_hasAT || count _atMags == 0) exitWith {};
    
    // Verificar si tiene munición para el AT
    private _hasMag = false;
    {
        if (_x in _atMags) exitWith {_hasMag = true};
    } forEach (magazines _unit);
    
    if (!_hasMag) exitWith {};
    
    // Buscar grupos de enemigos cercanos (3+ unidades)
    private _enemyGroups = [_unit] call BE_AI_FindEnemyGroups;
    
    if (count _enemyGroups > 0) then {
        // Seleccionar grupo más numeroso
        _enemyGroups sort false; // Mayor a menor
        private _targetGroup = _enemyGroups select 0;
        _targetGroup params ["_groupUnits", "_groupCenter"];
        
        // Usar AT contra el grupo
        [_unit, _groupCenter, _atWeapon] spawn BE_AI_UseATAgainstTarget;
    };
};

// Encontrar grupos de enemigos
BE_AI_FindEnemyGroups = {
    params ["_unit"];
    
    private _unitPos = getPosATL _unit;
    private _unitSide = side _unit;
    private _maxRange = 300; // Rango máximo para detectar grupos
    
    // Obtener todas las unidades enemigas en rango
    private _nearUnits = _unitPos nearEntities ["Man", _maxRange];
    _nearUnits = _nearUnits select {
        alive _x && 
        side _x != _unitSide && 
        side _x != civilian &&
        side _x getFriend _unitSide < 0.6
    };
    
    // Agrupar unidades cercanas entre sí
    private _groups = [];
    private _processedUnits = [];
    
    {
        private _currentUnit = _x;
        if (!(_currentUnit in _processedUnits)) then {
            // Encontrar todas las unidades a 15m de esta unidad
            private _groupUnits = [_currentUnit];
            private _unitsToCheck = [_currentUnit];
            _processedUnits pushBack _currentUnit;
            
            while {count _unitsToCheck > 0} do {
                private _checkUnit = _unitsToCheck deleteAt 0;
                private _nearbyEnemies = (getPosATL _checkUnit) nearEntities ["Man", 15];
                _nearbyEnemies = _nearbyEnemies select {
                    alive _x && 
                    side _x != _unitSide && 
                    side _x != civilian &&
                    !(_x in _processedUnits)
                };
                
                {
                    _groupUnits pushBack _x;
                    _unitsToCheck pushBack _x;
                    _processedUnits pushBack _x;
                } forEach _nearbyEnemies;
            };
            
            // Si el grupo tiene al menos BE_AI_GroupSizeThreshold unidades, registrar
            if (count _groupUnits >= BE_AI_GroupSizeThreshold) then {
                // Calcular centro del grupo
                private _centerPos = [0,0,0];
                {
                    _centerPos = _centerPos vectorAdd (getPosATL _x);
                } forEach _groupUnits;
                _centerPos = _centerPos vectorMultiply (1 / (count _groupUnits));
                
                // Añadir a la lista de grupos [unidades, centro, tamaño]
                _groups pushBack [_groupUnits, _centerPos, count _groupUnits];
            };
        };
    } forEach _nearUnits;
    
    _groups
};

// Usar AT contra objetivo específico
BE_AI_UseATAgainstTarget = {
    params ["_unit", "_targetPos", "_atWeapon"];
    
    // Marcar unidad como ocupada
    _unit setVariable ["BE_AI_BusyWithAT", true];
    
    // Posición original para volver después
    private _originalPos = getPosATL _unit;
    
    // Moverse a una posición con buena línea de tiro si es necesario
    private _goodFiringPos = [_unit, _targetPos] call BE_AI_FindGoodFiringPosition;
    
    if (_goodFiringPos distance _unit > 5) then {
        // Moverse a posición de disparo
        _unit doMove _goodFiringPos;
        
        // Esperar a que llegue
        private _timeout = time + 20;
        waitUntil {
            sleep 0.5; 
            _unit distance _goodFiringPos < 3 || 
            time > _timeout || 
            !alive _unit
        };
    };
    
    if (!alive _unit) exitWith {};
    
    // Preparar y disparar AT
    _unit selectWeapon _atWeapon;
    sleep 1;
    
    // Asegurarse de mirar al objetivo
    _unit doWatch _targetPos;
    sleep 2;
    
    // Disparar
    _unit setWeaponReloadingTime [_unit, _atWeapon, 0];
    _unit forceWeaponFire [_atWeapon, "Single"];
    
    // Esperar un poco y volver al comportamiento normal
    sleep 3;
    _unit doMove _originalPos;
    
    // Liberar unidad
    _unit setVariable ["BE_AI_BusyWithAT", false];
};

// Encontrar buena posición para disparar AT
BE_AI_FindGoodFiringPosition = {
    params ["_unit", "_targetPos"];
    
    private _unitPos = getPosATL _unit;
    private _bestPos = _unitPos;
    private _bestScore = 0;
    
    // Comprobar posiciones cercanas para encontrar la mejor
    for "_i" from 0 to 5 do {
        private _testPos = [
            (_unitPos select 0) + (random 20 - 10),
            (_unitPos select 1) + (random 20 - 10),
            _unitPos select 2
        ];
        
        // Verificar que la posición sea accesible
        if (!surfaceIsWater _testPos) then {
            // Comprobar línea de visión
            private _vis = [objNull, "VIEW"] checkVisibility [
                _testPos vectorAdd [0,0,1.5], 
                _targetPos vectorAdd [0,0,1]
            ];
            
            // Calcular puntuación (visibilidad + cobertura)
            private _score = _vis;
            
            // Bonus por cobertura cercana
            private _covers = nearestObjects [_testPos, ["ROCK", "WALL", "CAR", "HOUSE"], 5];
            if (count _covers > 0) then {
                _score = _score + 0.3;
            };
            
            // Si es mejor que la actual, guardar
            if (_score > _bestScore) then {
                _bestScore = _score;
                _bestPos = _testPos;
            };
        };
    };
    
    _bestPos
};

// Comprobar si hay armas AT cercanas para recoger
BE_AI_CheckNearbyATWeapons = {
    params ["_unit"];
    
    // Si ya tiene un AT, no necesitamos otro
    if (secondaryWeapon _unit != "" && {secondaryWeapon _unit in BE_AI_ATWeapons}) exitWith {};
    
    // Buscar armas en el suelo cercanas
    private _unitPos = getPosATL _unit;
    private _nearWeapons = nearestObjects [_unitPos, ["WeaponHolderSimulated", "WeaponHolder"], BE_AI_ATWeaponDetectionRange];
    
    private _foundAT = objNull;
    private _foundATType = "";
    
    // Verificar si alguna es un AT
    {
        private _weaponHolder = _x;
        private _weapons = weaponCargo _weaponHolder;
        
        {
            if (_x in BE_AI_ATWeapons) exitWith {
                _foundAT = _weaponHolder;
                _foundATType = _x;
            };
        } forEach _weapons;
        
        if (!isNull _foundAT) exitWith {};
    } forEach _nearWeapons;
    
    // Si encontramos un AT, recogerlo
    if (!isNull _foundAT && _foundATType != "") then {
        [_unit, _foundAT, _foundATType] spawn BE_AI_PickupATWeapon;
    };
};

// Recoger arma AT y añadir munición
BE_AI_PickupATWeapon = {
    params ["_unit", "_weaponHolder", "_weaponType"];
    
    // Marcar unidad como ocupada
    _unit setVariable ["BE_AI_BusyWithAT", true];
    
    // Moverse hacia el arma
    private _wpPos = getPosATL _weaponHolder;
    _unit doMove _wpPos;
    
    // Esperar a que llegue
    private _timeout = time + 15;
    waitUntil {
        sleep 0.5; 
        _unit distance _weaponHolder < 3 || 
        time > _timeout || 
        !alive _unit ||
        isNull _weaponHolder
    };
    
    // Si la unidad murió o el arma desapareció, abortar
    if (!alive _unit || isNull _weaponHolder) exitWith {
        if (alive _unit) then {
            _unit setVariable ["BE_AI_BusyWithAT", false];
        };
    };
    
    // Recoger el arma
    private _currentBackpack = backpack _unit;
    private _needBackpack = _currentBackpack == "";
    
    // Si no tiene mochila, intentar añadir una
    if (_needBackpack) then {
        _unit addBackpack "B_AssaultPack_khk";
        sleep 0.5;
    };
    
    // Quitar arma secundaria actual si tiene
    if (secondaryWeapon _unit != "") then {
        _unit removeWeapon secondaryWeapon _unit;
    };
    
    // Añadir el arma AT
    private _success = false;
    
    // Método 1: Intentar directamente
    _unit addWeapon _weaponType;
    if (secondaryWeapon _unit == _weaponType) then {
        _success = true;
        
        // Eliminar el arma del suelo
        clearWeaponCargoGlobal _weaponHolder;
    } else {
        // Método 2: Usando take action
        _unit action ["TakeWeapon", _weaponHolder, _weaponType];
        sleep 1;
        
        if (secondaryWeapon _unit == _weaponType) then {
            _success = true;
        };
    };
    
    // Si se recogió con éxito, añadir munición
    if (_success) then {
        // Obtener tipo de munición compatible
        private _atMags = getArray (configFile >> "CfgWeapons" >> _weaponType >> "magazines");
        
        if (count _atMags > 0) then {
            private _magType = _atMags select 0;
            
            // Añadir 2-3 proyectiles
            for "_i" from 1 to (2 + floor(random 2)) do {
                _unit addMagazine _magType;
            };
        };
    };
    
    // Liberar unidad
    _unit setVariable ["BE_AI_BusyWithAT", false];
};

// ==================== SISTEMA DE GESTIÓN DE VEHÍCULOS DE COMBATE ====================
// Inicializar sistema de gestión de vehículos
BE_AI_InitVehicleSystem = {
    // Registrar vehículos existentes
    call BE_AI_RegisterVehicles;
    
    // Bucle principal de gestión de vehículos
    [] spawn {
        while {BE_AI_SystemActive && BE_AI_UseVehicleSystem} do {
            // Actualizar registro de vehículos
            if ((count allUnits) > 0) then {
                call BE_AI_RegisterVehicles;
            };
            
            // Gestionar comportamiento de vehículos
            call BE_AI_UpdateVehicleBehavior;
            
            sleep BE_AI_VehicleUpdateInterval;
        };
    };
};

// Registrar vehículos para gestión
BE_AI_RegisterVehicles = {
    // Buscar vehículos controlados por IA con armamento
    private _vehicles = vehicles select {
        !isNull _x &&
        alive _x &&
        {!isPlayer driver _x} &&
        {!isPlayer gunner _x} &&
        {!isPlayer commander _x} &&
        {count weapons _x > 0} &&
        {!(_x getVariable ["BE_AI_ManagedVehicle", false])}
    };
    
    // Registrar nuevos vehículos
    {
        private _veh = _x;
        
        // Marcar como gestionado
        _veh setVariable ["BE_AI_ManagedVehicle", true];
        _veh setVariable ["BE_AI_LastTargetCheck", 0];
        _veh setVariable ["BE_AI_EngageAttempts", 0];
        
        // Añadir a la lista de vehículos gestionados
        BE_AI_ManagedVehicles pushBack _veh;
    } forEach _vehicles;
    
    // Limpiar vehículos destruidos
    BE_AI_ManagedVehicles = BE_AI_ManagedVehicles select {!isNull _x && alive _x};
};

// Actualizar comportamiento de vehículos
BE_AI_UpdateVehicleBehavior = {
    {
        private _veh = _x;
        if (!alive _veh) then {continue};
        
        // Verificar si el vehículo tiene tripulación
        private _hasGunner = !isNull gunner _veh;
        private _hasCommander = !isNull commander _veh;
        private _hasDriver = !isNull driver _veh;
        
        // Solo procesamos vehículos con al menos un tripulante
        if (_hasGunner || _hasCommander || _hasDriver) then {
            // Asegurarse que la tripulación tiene IA completa
            if (_hasGunner && !isPlayer gunner _veh) then {
                private _gunner = gunner _veh;
                _gunner enableAI "ALL";
                _gunner setSkill 1;
            };
            
            if (_hasCommander && !isPlayer commander _veh) then {
                private _commander = commander _veh;
                _commander enableAI "ALL";
                _commander setSkill 1;
            };
            
            // Forzar detección y ataque de objetivos
            [_veh] call BE_AI_VehicleEnemyDetection;
        };
    } forEach BE_AI_ManagedVehicles;
};

// Mejorar detección de enemigos para vehículos
BE_AI_VehicleEnemyDetection = {
    params ["_veh"];
    
    // Verificar si es momento de buscar objetivos
    if (time - (_veh getVariable ["BE_AI_LastTargetCheck", 0]) < 2) exitWith {};
    _veh setVariable ["BE_AI_LastTargetCheck", time];
    
    // Posición y lado del vehículo
    private _vehPos = getPosATL _veh;
    private _vehSide = side effectiveCommander _veh;
    
    // Buscar objetivos potenciales (unidades y vehículos)
    private _potentialTargets = _vehPos nearEntities [["Man", "Car", "Tank", "Air"], 800];
    _potentialTargets = _potentialTargets select {
        alive _x && 
        (side _x) getFriend _vehSide < 0.6 && 
        !(side _x == civilian)
    };
    
    // Si no hay objetivos, salir
    if (count _potentialTargets == 0) exitWith {};
    
    // Ordenar por prioridad y distancia
    private _targetsByPriority = [];
    
    {
        private _target = _x;
        private _distance = _vehPos distance _target;
        private _priority = 0;
        
        // Calcular prioridad según tipo
        if (_target isKindOf "Tank") then {_priority = 4};
        if (_target isKindOf "APC") then {_priority = 3};
        if (_target isKindOf "Car" && count weapons _target > 0) then {_priority = 2};
        if (_target isKindOf "Car") then {_priority = 1};
        if (_target isKindOf "Man") then {_priority = 0};
        
        // Ajustar por distancia (más cerca = mayor prioridad)
        _priority = _priority + (1000 / (_distance max 1));
        
        // Añadir a lista
        _targetsByPriority pushBack [_target, _priority, _distance];
    } forEach _potentialTargets;
    
    // Ordenar por prioridad (mayor a menor)
    _targetsByPriority sort false;
    
    // Si hay objetivos, hacer que el vehículo ataque
    if (count _targetsByPriority > 0) then {
        private _bestTarget = (_targetsByPriority select 0) select 0;
        
        // Forzar ataque
        private _commander = commander _veh;
        private _gunner = gunner _veh;
        
        // Asegurar detección del objetivo
        if (!isNull _commander && !isPlayer _commander) then {
            _commander reveal [_bestTarget, 4];
            _commander doWatch _bestTarget;
            _commander doTarget _bestTarget;
            _commander doFire _bestTarget;
        };
        
        if (!isNull _gunner && !isPlayer _gunner) then {
            _gunner reveal [_bestTarget, 4];
            _gunner doWatch _bestTarget;
            _gunner doTarget _bestTarget;
            _gunner doFire _bestTarget;
        };
        
        // Ajustar comportamiento del grupo
        private _vehGroup = group effectiveCommander _veh;
        _vehGroup setBehaviour "COMBAT";
        _vehGroup setCombatMode "RED";
        
        // Forzar estabilidad del vehículo para disparar
        if (!isNull driver _veh && !isPlayer driver _veh) then {
            // Si el vehículo se está moviendo, detenerlo brevemente
            if (speed _veh > 5) then {
                driver _veh disableAI "PATH";
                _veh setVelocity [0,0,0];
                
                [_veh, driver _veh] spawn {
                    params ["_vehicle", "_driver"];
                    sleep 3;
                    if (alive _driver && alive _vehicle) then {
                        _driver enableAI "PATH";
                    };
                };
            };
        };
    };
};

// ==================== SISTEMA DE COMUNICACIÓN TÁCTICA DE EQUIPO ====================
// Inicializar sistema de comunicación táctica
BE_AI_InitTeamCommsSystem = {
    // Bucle principal de comunicación
    [] spawn {
        while {BE_AI_SystemActive && BE_AI_UseTeamComms} do {
            // Compartir conocimiento entre unidades
            call BE_AI_ShareUnitKnowledge;
            
            sleep BE_AI_KnowledgeShareInterval;
        };
    };
};

// Compartir conocimiento entre unidades
BE_AI_ShareUnitKnowledge = {
    // Agrupar unidades por lado
    private _unitsBySide = [];
    {
        private _side = _x;
        
        // Obtener todas las unidades de este lado
        private _sideUnits = allUnits select {
            alive _x && 
            side _x == _side && 
            !isPlayer _x
        };
        
        _unitsBySide pushBack [_side, _sideUnits];
    } forEach [WEST, EAST, RESISTANCE, CIVILIAN];
    
    // Procesar cada lado
    {
        _x params ["_side", "_units"];
        
        // Procesar cada unidad de este lado
        {
            private _unit = _x;
            
            // Sólo procesar unidades que pueden detectar enemigos
            if (!(_unit getVariable ["BE_AI_IsShadow", false]) && 
                !(_unit getVariable ["BE_AI_IsProxy", false])) then {
                
                // Ver qué enemigos conoce esta unidad
                private _knownEnemies = [];
                {
                    private _enemy = _x;
                    if (alive _enemy && 
                        side _enemy getFriend _side < 0.6 && 
                        _unit knowsAbout _enemy > 1.5) then {
                        
                        _knownEnemies pushBack [_enemy, getPosATL _enemy, time];
                    };
                } forEach (_unit nearEntities ["Man", 200]);
                
                // Si conoce enemigos, compartir con unidades cercanas
                if (count _knownEnemies > 0) then {
                    {
                        private _nearAlly = _x;
                        
                        // No compartir con la propia unidad o con jugadores
                        if (_nearAlly != _unit && !isPlayer _nearAlly && alive _nearAlly) then {
                            // Compartir cada enemigo conocido
                            {
                                _x params ["_enemy", "_enemyPos", "_timeSpotted"];
                                
                                if (alive _enemy) then {
                                    // Revelar enemigo a esta unidad aliada
                                    private _currentKnowledge = _nearAlly knowsAbout _enemy;
                                    
                                    // Solo aumentar conocimiento si es bajo
                                    if (_currentKnowledge < 2) then {
                                        _nearAlly reveal [_enemy, 2 max _currentKnowledge];
                                        
                                        // Si la unidad está en modo básico/shadow, mejorar temporalmente
                                        if (_nearAlly getVariable ["BE_AI_Level", ""] == "BASIC") then {
                                            _nearAlly enableAI "TARGET";
                                            _nearAlly enableAI "AUTOTARGET";
                                            
                                            // Restaurar después de un tiempo
                                            [_nearAlly] spawn {
                                                params ["_unit"];
                                                sleep 30;
                                                if (alive _unit && 
                                                    _unit getVariable ["BE_AI_Level", ""] == "BASIC" && 
                                                    behaviour _unit != "COMBAT") then {
                                                    _unit disableAI "TARGET";
                                                    _unit disableAI "AUTOTARGET";
                                                };
                                            };
                                        };
                                        
                                        // Hacer que las unidades inactivas se orienten hacia la amenaza
                                        if (unitReady _nearAlly && random 1 > 0.5) then {
                                            _nearAlly doWatch _enemyPos;
                                        };
                                    };
                                };
                            } forEach _knownEnemies;
                        };
                    } forEach (_unit nearEntities [["Man", "Car", "Tank"], BE_AI_CommsRange] select {side _x == _side});
                };
            };
        } forEach _units;
    } forEach _unitsBySide;
};

// ==================== INICIALIZACIÓN DEL SISTEMA ====================
// Función principal de inicialización
BE_AI_InitSystem = {
    // Evitar inicialización duplicada
    if (BE_AI_Initialized) exitWith {};
    
    // Ajustar configuración según modo de rendimiento
    if (BE_AI_PerformanceMode == 2) then {
        // Modo Alto Rendimiento
        BE_AI_MaxFullAI = BE_AI_MaxFullAI * 0.7;
        BE_AI_LOD_CloseRange = BE_AI_LOD_CloseRange * 0.8;
        BE_AI_LOD_MediumRange = BE_AI_LOD_MediumRange * 0.8;
        BE_AI_ShadowMinDistance = BE_AI_ShadowMinDistance * 0.9;
    } else {
        if (BE_AI_PerformanceMode == 3) then {
            // Modo Ultra (máximo rendimiento)
            BE_AI_MaxFullAI = BE_AI_MaxFullAI * 0.5;
            BE_AI_LOD_CloseRange = BE_AI_LOD_CloseRange * 0.6;
            BE_AI_LOD_MediumRange = BE_AI_LOD_MediumRange * 0.6;
            BE_AI_ShadowMinDistance = BE_AI_ShadowMinDistance * 0.7;
            BE_AI_ProxyMinDistance = BE_AI_ProxyMinDistance * 0.8;
        };
    };
    
    // Registrar todas las unidades IA existentes
    {
        if (!isPlayer _x) then {[_x] call BE_AI_RegisterUnit};
    } forEach allUnits;
    
    // Monitorear nuevas unidades
    [] spawn {
        while {BE_AI_SystemActive} do {
            {
                if (!isPlayer _x && !(_x in BE_AI_TrackedUnits)) then {
                    [_x] call BE_AI_RegisterUnit;
                };
            } forEach allUnits;
            
            // Limpiar unidades muertas
            call BE_AI_CleanupDeadUnits;
            
            sleep 5;
        };
    };
    
    // Inicializar subsistemas según configuración
    if (BE_AI_UseDirector) then {
        call BE_AI_InitDirector;
        BE_AI_AllSystems pushBack "Director";
    };
    
    if (BE_AI_UseProxies) then {
        call BE_AI_InitProxies;
        BE_AI_AllSystems pushBack "Proxies";
    };
    
    if (BE_AI_UseShadowAI) then {
        call BE_AI_InitShadowAI;
        BE_AI_AllSystems pushBack "Shadow AI";
    };
    
    if (BE_AI_UsePathCache) then {
        call BE_AI_InitPathCache;
        BE_AI_AllSystems pushBack "Path Cache";
    };
    
    if (BE_AI_UseStreamingBehavior) then {
        call BE_AI_InitStreamingBehavior;
        BE_AI_AllSystems pushBack "Streaming Behavior";
    };
    
    // Añadir sistema de alertas de combate
    call BE_AI_InitAlertSystem;
    BE_AI_AllSystems pushBack "Combat Alerts";
    
    // Añadir sistema táctico
    if (BE_AI_UseTacticalBehaviors) then {
        call BE_AI_InitTacticalSystem;
        BE_AI_AllSystems pushBack "Tactical Behaviors";
    };
    
    // Añadir sistema de armamento AT
    if (BE_AI_UseATWeaponSystem) then {
        call BE_AI_InitATWeaponSystem;
        BE_AI_AllSystems pushBack "AT Weapon System";
    };
    
    // Añadir sistema de vehículos
    if (BE_AI_UseVehicleSystem) then {
        call BE_AI_InitVehicleSystem;
        BE_AI_AllSystems pushBack "Vehicle Management";
    };
    
    // Añadir sistema de comunicación táctica
    if (BE_AI_UseTeamComms) then {
        call BE_AI_InitTeamCommsSystem;
        BE_AI_AllSystems pushBack "Tactical Comms";
    };
    
    // Sistema inicializado
    BE_AI_Initialized = true;
};

// Iniciar sistema
[] spawn {
    sleep 2; // Pequeña espera para que la misión se estabilice
    call BE_AI_InitSystem;
};

// Función pública para reiniciar el sistema
BE_AI_Restart = {
    if (BE_AI_Initialized) then {
        BE_AI_SystemActive = false;
        sleep 1;
        
        // Limpiar variables
        BE_AI_Initialized = false;
        BE_AI_AllSystems = [];
        BE_AI_TrackedUnits = [];
        BE_AI_ProxyGroups = [];
        BE_AI_PathCache = createHashMap;
        BE_AI_ShadowUnits = [];
        BE_AI_UnitLODLevels = createHashMap;
        
        // Reiniciar
        BE_AI_SystemActive = true;
        call BE_AI_InitSystem;
    } else {
        call BE_AI_InitSystem;
    };
};

// Mostrar mensajes de información
BE_AI_ShowInfo = {
    private _text = "<t align='center' size='1.5'>BE Advanced AI System</t><br/><br/>";
    _text = _text + format ["Versión: <t color='#FFCC00'>%1</t><br/>", BE_AI_Version];
    _text = _text + format ["Estado: <t color='#%1'>%2</t><br/>", ["FF0000", "00FF00"] select BE_AI_SystemActive, ["Inactivo", "Activo"] select BE_AI_SystemActive];
    _text = _text + format ["Modo: <t color='#FFCC00'>%1</t><br/>", ["Equilibrado", "Alto rendimiento", "Ultra"] select (BE_AI_PerformanceMode - 1)];
    _text = _text + "<br/><t align='left'>Sistemas activos:</t><br/>";
    {_text = _text + format ["• <t color='#AAFFAA'>%1</t><br/>", _x]} forEach BE_AI_AllSystems;
    _text = _text + "<br/><t align='left'>Estadísticas:</t><br/>";
    _text = _text + format ["• Unidades gestionadas: <t color='#AAFFAA'>%1</t><br/>", count BE_AI_TrackedUnits];
    _text = _text + format ["• Grupos proxy: <t color='#AAFFAA'>%1</t><br/>", count BE_AI_ProxyGroups];
    _text = _text + format ["• Unidades shadow: <t color='#AAFFAA'>%1</t><br/>", count BE_AI_ShadowUnits];
    _text = _text + format ["• Aciertos de caché: <t color='#AAFFAA'>%1</t><br/>", BE_AI_Stats getOrDefault ["PathCacheHits", 0]];
    hint parseText _text;
};

// Añadir acción de menú para info
if (hasInterface) then {
    player addAction ["<t color='#FFCC00'>Info Sistema IA</t>", {call BE_AI_ShowInfo}, nil, 1, false, true, "", "true", 10, false, ""];
};
