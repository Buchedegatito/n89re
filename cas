/* 
TPW CARS - Ambient civilian traffic
Author: tpw 
Date: 20210925
Version: 1.73
Requires: CBA A3, tpw_core.sqf
Compatibility: SP, MP client

Disclaimer: Feel free to use and modify this code, on the proviso that you post back changes and improvements so that everyone can benefit from them, and acknowledge the original author (tpw) in any derivative works.     

To use: 
1 - Save this script into your mission directory as eg tpw_cars.sqf
2 - Call it with 0 = [5,1000,15,2,1,["str1","str2",etc]] execvm "tpw_cars.sqf"; where 5 = start delay, 1000 = radius, 15 = number of waypoints, 2 = max cars, 1 = no cars spawned during combat (0 = cars spawned during combat), ["str1","str2",etc] = substrings of mod car classnames).

THIS SCRIPT WON'T RUN ON DEDICATED SERVERS
*/

if (isDedicated) exitWith {};
if (count _this < 6) exitwith {player sidechat "TPW CARS incorrect/no config, exiting."};
WaitUntil {!isNull FindDisplay 46};

// READ IN VARIABLES
tpw_car_version = "1.73"; // Version string
tpw_car_sleep = _this select 0;
tpw_car_radius = _this select 1;
tpw_car_waypoints = _this select 2;
tpw_car_maxnum = _this select 3;
tpw_car_nocombatspawn = _this select 4;
tpw_car_include = _this select 5;

// DEFAULT VALUES IF MP
if (isMultiplayer) then 
	{
	tpw_car_sleep = 5;
	tpw_car_radius = 1000;
	tpw_car_waypoints = 15;
	tpw_car_maxnum =2;
	};
	
// VARIABLES
tpw_car_civcarlist = [
"C_Hatchback_01_F",
"C_Hatchback_01_F",
"C_Hatchback_01_F",
"C_Offroad_01_F",
"C_Offroad_01_F",
"C_Offroad_01_F",
"C_Offroad_01_covered_F",
"C_Offroad_01_covered_F",
"C_SUV_01_F",
"C_SUV_01_F",
"C_SUV_01_F",
"C_Van_02_vehicle_f",
"C_Van_02_vehicle_f",
"C_Van_02_service_f",
"C_Van_02_service_f",
"C_Van_02_transport_f",
"C_Van_02_transport_f",
"C_Offroad_01_repair_F",
"C_Offroad_01_repair_F",
"C_Hatchback_01_sport_F",
"C_Hatchback_01_sport_F",
"C_Hatchback_01_sport_F",
"C_Hatchback_01_sport_F",
"C_Hatchback_01_sport_F",
"C_Hatchback_01_sport_F",
"C_Quadbike_01_F"
]; 

tpw_car_comcarlist = [
"C_Van_01_box_F",
"C_Van_01_transport_F",
"C_Van_01_fuel_F",
"C_Truck_02_fuel_f",
"C_Van_02_medevac_f",
"C_Truck_02_transport_f",
"C_Truck_02_box_f",
"C_Truck_02_covered_f"
]; 

// ADD TANOAN CARS IF AVAILABLE
if (isclass (configfile/"CfgWeapons"/"u_c_man_casual_1_f")) then 
	{
	tpw_car_civcarlist = tpw_car_civcarlist + ["C_Offroad_02_unarmed_F","C_Offroad_02_unarmed_F","C_Offroad_02_unarmed_F"];
	};

// ADD IDAP CARS IF AVAILABLE
if (isclass (configfile/"CfgWeapons"/"U_C_IDAP_Man_cargo_F")) then 
	{	
	private ["_cfg"];
	_cfg = (configFile >> "CfgVehicles");
	for "_i" from 0 to ((count _cfg) -1) do 
		{
		if (isClass ((_cfg select _i) ) ) then 
			{
			_cfgName = configName (_cfg select _i);
			if ( (_cfgName isKindOf "car") && {getNumber ((_cfg select _i) >> "scope") == 2} && {["IDAP",str _cfgname] call BIS_fnc_inString} ) then 
				{
				tpw_car_civcarlist pushback _cfgname;
				};
			};
		};
	};

// ADD CARS FROM INCLUDE LIST
	{
	private ["_cfg"];
	_cfg = (configFile >> "CfgVehicles");
	for "_i" from 0 to ((count _cfg) -1) do 
		{
		if (isClass ((_cfg select _i) ) ) then 
			{
			_cfgName = configName (_cfg select _i);
			_side = getNumber ((_cfg select _i) >> "side");
			if ( (_cfgName isKindOf "car") && {getNumber ((_cfg select _i) >> "scope") == 2} && {[_x,str _cfgname] call BIS_fnc_inString} && {_side ==3}) then 
				{
				tpw_car_civcarlist pushback _cfgname;
				};
			};
		};
	} foreach tpw_car_include;
	
// User blacklist
for "_i" from 0 to (count tpw_car_civcarlist - 1) do	
	{	
	_car = tpw_car_civcarlist select _i;
		{
		if ([_x,str _car] call BIS_fnc_inString) then
			{
			tpw_car_civcarlist set [_i, -1];
			};
		} foreach tpw_core_blacklist;
	};
tpw_car_civcarlist = tpw_car_civcarlist - [-1];	

for "_i" from 0 to (count tpw_car_comcarlist - 1) do	
	{	
	_car = tpw_car_comcarlist select _i;
		{
		if ([_x,str _car] call BIS_fnc_inString) then
			{
			tpw_car_comcarlist set [_i, -1];
			};
		} foreach tpw_core_blacklist;
	};
tpw_car_comcarlist = tpw_car_comcarlist - [-1];	


tpw_car_cararray = []; // array holding spawned cars
tpw_car_farroads = []; // roads > 250m from unit
tpw_car_roadlist = []; // roads near unit
tpw_car_mindist = 100; // Car won't be removed if closer than this to player
tpw_car_slowdist = 150; // Car will slow down if this close to the player
tpw_car_spawndist = 250; // Cars will be spawned further than this distance from player
tpw_car_active = true; // Global activate/deactivate
tpw_car_spawntime = 0; // Time must be greater than this to spawn a new vehicle
tpw_car_num = tpw_car_maxnum; // Initial maximum number of cars
tpw_car_time = time; // Time until next car can spawn
tpw_car_lastpos = [0,0,0];

// DELAY	
sleep tpw_car_sleep;	

// CREATE AI CENTRE
_centerC = createCenter civilian;

// DELETE CAR OCCUPANTS AND WAYPOINTS
tpw_car_fnc_delete =
	{
	private ["_grp"];
	_grp = _this select 0;
	// Delete occupants
		{
		deletevehicle _x;
		sleep 0.1;
		} count units _grp;	

	// Delete occupant group		
	deletegroup _grp;
	};

// SPAWN CIV/CAR INTO EMPTY GROUP
tpw_car_fnc_carspawn =
	{
	private ["_civtype","_driver","_passenger","_car","_roadseg","_spawncar","_spawnpos","_spawndir","_i","_ct","_sqname","_carlist","_road","_wp","_wppos"];

	// Only bother if enough time has passed since battle
	if (tpw_core_battle) exitwith {};	

	// Pick a random road segment to spawn car
	[] call tpw_car_fnc_roadpos;
	if (count tpw_car_roadlist < 100) exitwith {};
	_roadseg = tpw_car_roadlist select (floor (random (count tpw_car_roadlist)));
	if (_roadseg distance player < tpw_car_spawndist ) exitwith {};
	
	// List of cars to select from
	tpw_car_carlist = tpw_car_civcarlist;
	if (daytime > tpw_core_morning || daytime < tpw_core_night) then
		{
		tpw_car_carlist = tpw_car_civcarlist + tpw_car_comcarlist; // vans only during daytime
		};
	
	// Spawn car
	_spawnpos = getposasl _roadseg;
	_spawndir = getdir _roadseg;
	_car = selectrandom tpw_car_carlist;
	_spawncar = _car createVehicle (_spawnpos vectoradd [0,0,0.5]);
	_spawncar setvariable ["tpw_veh",1];
	_spawncar setdir _spawndir; 
	_spawncar setfuel random 0.1 + 0.8;
	_spawncar limitspeed 100;

	// Driver
	_driver  = [[0,0,0]] call tpw_core_fnc_spawnciv;
	_driver setcaptive true;
	_driver setSpeaker "NoVoice";
	_driver setskill 0;	
	_driver setbehaviour "CARELESS";	
	_driver disableAI 'TARGET';
	_driver disableAI 'AUTOTARGET';
	_driver addeventhandler ["Hit",{_this call tpw_civ_fnc_casualty}];
	_driver addeventhandler ["Killed",{_this call tpw_civ_fnc_casualty}];
	_driver moveindriver _spawncar;	
	_driver addgoggles (selectrandom tpw_core_specs);
	_driver setvariable ["tpw_car_crew",1];

	// Passenger 50% of the time
	if (_spawncar emptypositions "cargo" > 0 && random 10 < 5) then 
		{
		_passenger = [[0,0,0]] call tpw_core_fnc_spawnciv;
		_passenger setcaptive true;
		_passenger setSpeaker "NoVoice";		
		_passenger setbehaviour "CARELESS";	
		_passenger setskill 0;		
		_passenger disableAI 'TARGET';
		_passenger disableAI 'AUTOTARGET';
		_passenger addeventhandler ["Hit",{_this call tpw_civ_fnc_casualty}];
		_passenger addeventhandler ["Killed",{_this call tpw_civ_fnc_casualty}];
		_passenger moveincargo _spawncar;
		_passenger addgoggles (selectrandom tpw_core_specs);
		_passenger setvariable ["tpw_car_crew",1];
		};

	//Set variables 
	_spawncar setvariable ["tpw_car_owner", [player],true];
	_spawncar setvariable ["tpw_car_occupants",group _driver,true];
	_spawncar setvariable ["tpw_car_stereo",0];

	//Add ability to commandeer car
	_spawncar addaction 
		[
		"Commandeer Vehicle",
			{
			private ["_car","_grp","_fuel"];
			_car = _this select 0;
			_grp = _car getvariable "tpw_car_occupants";
			
			// Engine off
			_fuel = fuel _car;
			_car setfuel 0;
			sleep 0.1;
			_car setfuel _fuel;
			
			// Occupants out of car
				{
				unassignvehicle _x;
				_x leavevehicle _car;
				sleep 1;
				_x spawn 
					{
					waituntil 
						{
						_this setspeedmode "LIMITED";
						_this setbehaviour "CARELESS";
						_this forcespeed 4;
						sleep 5 + random 10; 
						(lineintersects [eyepos _this,eyepos player])
						}; 
					deletevehicle _this;
					};
				} foreach crew _car;

			// Remove menu item
			_car removeaction 0;
		
			// Remove car from player's car array (it can no longer be despawned)
			tpw_car_cararray = tpw_car_cararray - [_this select 0];
			}
		,nil,0,vehicle player == player	
		];

	//Assign waypoints
	for "_i" from 1 to tpw_car_waypoints do
		{
		sleep 0.2;
		_road = tpw_car_roadlist select (floor (random (count tpw_car_roadlist)));
		_wppos = getposasl _road; 
		_wp = (group _driver) addWaypoint [_wppos, 0];
		_wp setWaypointCompletionRadius 50;
		if (_i == tpw_car_waypoints) then 
			{
			_wp setwaypointtype "CYCLE";
			} else
			{
			_wp setWaypointType "MOVE";
			};
		};
		
	// Timer for stuck vehicle	
	_spawncar setvariable ["tpw_car_stucktime", diag_ticktime + 60]; 
	
	//Add car to the array of spawned cars
	if (damage _spawncar == 0) then
		{
		tpw_car_cararray set [count tpw_car_cararray,_spawncar];
		};
	};
    
// SEE IF ANY CARS OWNED BY OTHER PLAYERS ARE WITHIN RANGE, WHICH CAN BE USED INSTEAD OF SPAWNING A NEW CAR
tpw_car_fnc_nearcar =
	{
	private ["_owner","_nearcars","_shareflag","_car","_i","_exc"];
	_shareflag = 0;
	if (isMultiplayer) then 
		{
		// Array of near cars
		_nearcars = (position player) nearEntities [["Car"], tpw_car_radius];

		// Live units within range
		for "_i" from 0 to (count _nearcars - 1) do		
			{    
			_car = _nearcars select _i;
			if (_car distance vehicle player < tpw_car_radius && alive _car) then   
				{
				_owner = _car getvariable ["tpw_car_owner",[]];

				//Units with owners, but not this player
				if ((count _owner > 0) && !(player in _owner)) exitwith
					{
					_shareflag = 1;
					_owner set [count _owner,player]; // add player as another owner of this car
					_car setvariable ["tpw_car_owner",_owner,true]; // update ownership
					tpw_car_cararray set [count tpw_car_cararray,_car]; // add this car to the array of cars for this player
					};
				} 
			};
		};
	//Otherwise, spawn a new car
	if (_shareflag == 0) then 
		{
		[] call tpw_car_fnc_carspawn;    
		};
	};        
	
// POOL OF ROAD POSTIONS NEAR PLAYER
tpw_car_fnc_roadpos = 
	{ 
	if (tpw_car_lastpos distance player > tpw_car_radius / 2) then
		{
		tpw_car_lastpos = getposasl player;
		tpw_car_roadlist = ((position player) nearRoads tpw_car_radius) select {isonroad _x && {_x distance player > 250}};
		};
	};
			
// MAIN LOOP - ADD AND REMOVE CARS AS NECESSARY, CHECK IF OTHER PLAYERS HAVE DIED (MP)
sleep 10;
while {true} do 
	{
	if (tpw_car_active) then
		{
		private ["_cararray","_deadplayer","_grp","_center","_group","_logic","_driver","_near","_car","_i","_unit","_ncity","_dst","_cpos","_nearest","_dir"];
		
		// Randomise max cars
		if (count tpw_car_cararray == 0) then
			{
			tpw_car_num = ceil (random tpw_car_maxnum);
			
			// Fewer cars at night
			if (daytime < (tpw_core_morning) || daytime > (tpw_core_night)) then
				{
				tpw_car_num = tpw_car_num / 2
				};	
			};		

		// Add cars as necessary			
		if (count tpw_car_cararray < tpw_car_num ) then
			{
			if (diag_ticktime > tpw_car_spawntime) then 
				{
				// Delay car spawning appropriately		
				if (count nearestLocations [position player, ["NameCity","NameCityCapital","NameVillage"], tpw_car_radius] == 0) then
					{
					tpw_car_spawntime = diag_ticktime + random 180; // Long delay between new cars in the middle of nowhere (thanks Rydygier)
					} else
					{
					tpw_car_spawntime = diag_ticktime + 10; // Short delay between new cars in towns
					};
				if (tpw_core_battle && {tpw_car_nocombatspawn == 1}) then 
					{
					tpw_car_spawntime = diag_ticktime + random 240; // Long delay between cars during battle
					};
				0 = [] spawn tpw_car_fnc_nearcar;
				};
			};

		// For each car
		if (count tpw_car_cararray > 0) then
			{
			for "_i" from 0 to (count tpw_car_cararray - 1) do
				{
				_car = tpw_car_cararray select _i;
				_driver = driver _car;
				_dst = _car distance vehicle player;
				
				// Refuel
				if (fuel _car < 0.1) then
					{
					_car setfuel random 0.1 + 0.8;
					};
				
				// Remove commandeer menu from damaged cars or those with dead drivers
				if (damage _car > 0.2 || !(alive _driver)) then
					{
					_car removeaction 0;	
					};
					
				// If car is moving
				if (_car getvariable ["tpw_car_lastpos",[0,0,0]] distance position _car > 5) then
					{
					_car setvariable ["tpw_car_stucktime", diag_ticktime + 60]; 
					};
				_car setvariable ["tpw_car_lastpos",position _car]; 	
					
				// Conditions for stopping car - it'll be removed after 60 sec or so.
				if (_driver != player) then
					{
					damage _car > 0.25 || // damaged
					if (tpw_core_battle || // gunfire or explosions 
					(count (_car nearroads 50) == 0) || // too far from road
					diag_ticktime > _car getvariable "tpw_car_stucktime" // car hasn't been able to move enough					
					) then
						{
						dostop driver _car;
						};
					};	
					
				//Conditions for removing car
				if (_driver != player) then
					{
					if ((_dst > tpw_car_radius) || // too far from player
					diag_ticktime > _car getvariable "tpw_car_stucktime" // car has been still for 60 sec
					) then 
						{
						// If player can't see the car
							if (_dst  > tpw_car_mindist && {[objNull, "VIEW"] checkVisibility [eyePos player, eyePos driver _car] < 0.9}) then
								{
								// Remove player as owner, remove from player's car array
								_car setvariable ["tpw_car_owner", (_car getvariable "tpw_car_owner") - [player],true];            
								tpw_car_cararray set [_i,-1];    
								};
						};
					};
					
				// Delete orphaned drivers or passengers with no car
					{
					if (vehicle _x == _x and {lineintersects [eyepos _x,eyePos player]}) then
						{
						deletevehicle _x;
						};
					} foreach (allunits select {_x getvariable ["tpw_car_crew",0]==1});					
					

				// Delete the car, occupants and waypoints if it's not owned by anyone    
				if (count (_car getvariable ["tpw_car_owner",[]]) == 0) then    
					{
					_grp = _car getvariable "tpw_car_occupants";
					[_grp] call tpw_car_fnc_delete;
					deletevehicle _car;
					};
				};	

			// Update player's car array    
			tpw_car_cararray = tpw_car_cararray - [-1];
			player setvariable ["tpw_cararray",tpw_car_cararray,true];

			// If MP, check if any other players have been killed and disown their cars
			if (isMultiplayer) then 
				{
					{
					if ((isplayer _x) && !(alive _x)) then
						{
						_deadplayer = _x;
						_cararray = _x getvariable ["tpw_cararray"];
							{
							_x setvariable ["tpw_car_owner",(_x getvariable "tpw_car_owner") - [_deadplayer],true];
							} count _cararray;
						};
					} count allunits;    
				};
			};	
		};
	sleep random 10;    
	};  
