/* 
TPW CROWD - Ambient crowds, spawns large numbers of civs but disables their simulation unless the player can actually see them
Author: tpw 
Date: 20230104
Version: 1.24
Requires: CBA A3, tpw_core.sqf
Compatibility: SP only

Disclaimer: Feel free to use and modify this code, on the proviso that you post back changes and improvements so that everyone can benefit from them, and acknowledge the original author (tpw) in any derivative works.     

To use: 
1 - Save this script into your mission directory as eg tpw_civs.sqf
2 - Call it with 0 = [50,2,200,100,50,1.5] execvm "tpw_crowd.sqf"; where 50 = maximum crowd size, 2 = civilians per house, 200 = maximum spawn radius, 100 = crowd members closer than this (m) will animate, 50 = crowd members closer than this will disperse (m), 1.5 = seconds between spawning/visibility scans

THIS SCRIPT WON'T RUN ON DEDICATED SERVERS
*/

if (isDedicated) exitWith {};
if (count _this < 6) exitwith {player sidechat "TPW CROWD incorrect/no config, exiting."};
WaitUntil {!isNull FindDisplay 46};

// READ IN VARIABLES
tpw_crowd_max = _this select 0; // maximum number of civs
tpw_crowd_density = _this select 1; // crowd civs per house
tpw_crowd_radius = _this select 2; // radius to scan around player
tpw_crowd_animradius = _this select 3; // units closer than this will animate
tpw_crowd_moveradius = _this select 4; // units closer than this will disperse
tpw_crowd_scantime = _this select 5; // time (sec) between scanning, spawning and visibility checks. Higher saves CPU but distant units viewed through optics will take longer to start animating

// VARS
tpw_crowd_version = "1.24";
tpw_crowd_array = []; // array of all crowd civs
tpw_crowd_houses = []; // array of houses to spawn near
tpw_crowd_lastpos = [0,0,0]; // position of player at last house scan
tpw_crowd_active = true;
tpw_crowd_ceil = 1;
_centerc = createCenter civilian;
civilian setFriend [west, 1];
west setfriend [civilian,1];
tpw_crowd_sqname = creategroup [civilian,true];
tpw_crowd_sqname setbehaviour "CARELESS";	
tpw_crowd_sqname setspeedmode "LIMITED";

// SCAN FOR HOUSES TO SPAWN CROWDS NEAR
tpw_crowd_fnc_houses = 
	{
	if (player distance tpw_crowd_lastpos > tpw_crowd_moveradius) then
		{
		tpw_crowd_lastpos = position player;
		tpw_crowd_houses = [tpw_crowd_radius] call tpw_core_fnc_screenhouses;
		tpw_crowd_houses = tpw_crowd_houses select {damage _x < 0.75};
		};
	};

// ADJUST CROWD NUMBERS
tpw_crowd_adjust = 
	{
	while {true} do
		{
		// Houses	
		[] call tpw_crowd_fnc_houses;
		tpw_crowd_housect = count tpw_crowd_houses;

		// Adjust maximum crowd numbers
		tpw_crowd_ceil = tpw_crowd_housect * tpw_crowd_density;
		if (tpw_crowd_ceil > tpw_crowd_max) then		
			{
			tpw_crowd_ceil = tpw_crowd_max;
			};
			
		// Adjust crowd size over the day
		tpw_crowd_ceil = 1 + tpw_crowd_ceil * ([0,0,0,0,0,0.1,0.2,0.4,0.8,1,1,1,1,1,1,1,1,1,0.8,0.6,0.4,0.2,0.1,0.1,0,0] select floor daytime);
			
		// Smaller max crowds when raining
		if (rain > 0.2) then
			{
			tpw_crowd_ceil = 1 + floor (tpw_crowd_ceil / 10);
			};
		sleep 10.11;
		};
	};
	
// SPAWN CROWD
tpw_crowd_fnc_spawn =
	{	
	private ["_house","_housect", "_roads","_civ","_civtype","_spawnpos","_spawndir","_move","_animct","_sel"];
	
	// Don't scan for houses or spawn if moving quickly
	if  (speed vehicle player >  40) exitwith {};	
	
	// Don't spawn if insufficient houses
	if (tpw_crowd_housect < 3) exitwith {};	
	
	// Spawn on roadside if possible	
	_house = tpw_crowd_houses select (floor random tpw_crowd_housect); // random house
	_roads = _house nearroads 25;
	if (count _roads > 1) then
		{	
		_road = _roads select floor random count _roads;
		_spawnpos = _road modeltoworld [-10,-25 + random 50,0]; // side of road hopefully
		} else
		{
		_spawnpos = [position _house,5,15,1,0,100, 0] call BIS_fnc_findSafePos;
		};
	_spawndir = _spawnpos;	

	 // Don't spawn if too close	
	if (_spawnpos distance player < tpw_crowd_animradius) exitwith {};
	
	 // Don't spawn on water	
	if (surfaceiswater _spawnpos) exitwith {};	
	
	_animct = [0,1,2,3,4,5];
	for "_i" from 1 to 2 do
		{
		// Spawn crowd civ 
		_civ = [_spawnpos] call tpw_core_fnc_spawnciv;
		group _civ setbehaviour "CARELESS";	
		group _civ setspeedmode "LIMITED";
		_spawnpos = getposatl _civ;
		_spawnpos set [2,0];
		_civ setposatl (_spawnpos); // make sure they're at ground level
		_civ setcaptive true;
			
		// Face towards spawn pos	
		_civ setdir ([_civ, _spawndir] call BIS_fnc_dirTo);
		
		// Nerf AI
		_civ disableai "MOVE";
		_civ disableai "ANIM";
		_civ disableAI "TARGET";
		_civ disableAI "FSM";
		_civ disableAI "AUTOTARGET";
		_civ disableAI "AIMINGERROR";
		_civ disableAI "SUPPRESSION"; 
		_civ disableAI "CHECKVISIBLE"; 
		_civ disableAI "COVER"; 
		_civ disableAI "AUTOCOMBAT";
		_civ setunitpos "UP";
		_civ setspeedmode "LIMITED";
		_civ disableConversation true;
		_civ setSpeaker "NoVoice";
		removeallweapons _civ; 

		// Different animation for each crowd member
		_sel = _animct deleteat floor random count _animct;
		_move = [
		"Acts_CivilTalking_1",
		"Acts_CivilTalking_2",
		"Acts_CivilListening_1",
		"Acts_CivilListening_2",
		"Acts_CivilIdle_1",
		"Acts_CivilIdle_2"] select _sel;
		_civ setvariable ["tpw_crowd_anim",_move];
		_civ switchmove "";
		_civ playMove _move;
		_civ setvariable ["tpw_crowd_move",0]; // not moving
		_civ setAnimSpeedCoef 0.7 + random 0.2;		
		_civ enablesimulation false; // no simulation
		tpw_crowd_array pushback _civ; // add to crowd array
		
		// Break animation when shot
		_civ addeventhandler ["Hit",{_this select 0 switchmove ""}];
		};
		
		//Add killed/hit eventhandlers
		if (!isnil "tpw_civ_active" && {tpw_civ_active}) then
		{
		_civ addeventhandler ["Hit",{_this call tpw_civ_fnc_casualty}];
		_civ addeventhandler ["Killed",{_this call tpw_civ_fnc_casualty}];		
		};
	};
	
// MOVING LIPS	
tpw_crowd_fnc_talk =	
	{
	private _civ = _this select 0;
	_civ setrandomlip true;
	sleep random 5;
	_civ setrandomlip false;
	};	

// MAIN LOOP - ADD AND REMOVE CROWD AS REQUIRED
sleep 20;
[] spawn tpw_crowd_adjust;
sleep 5;
waituntil {!isnil "tpw_core_battle"};
while {true} do 
	{
	private ["_opt","_civ","_vis","_dest","_dests","_rain","_battle","_dist","_mov","_late","_many","_nearcars"];
	if (tpw_crowd_active) then
		{
		// Battle?
		if (tpw_core_battle) then
			{
			_battle = true;
			} else
			{
			_battle = false;
			};
		
		// Rain?
		if (rain > 0.2) then
			{
			_rain = true;
			} else
			{
			_rain = false;
			};
			
		// Too late?
		if (daytime < tpw_core_night && daytime > tpw_core_morning) then
			{
			_late = false;
			} else
			{
			_late = true;
			};
			
		// Too many?
		if (count tpw_crowd_array < tpw_crowd_ceil) then
			{
			_many = false;
			} else
			{
			_many = true;
			};
		
		// Is player looking through optics
		if (cameraview == "GUNNER") then
			{
			_opt = true;
			} else
			{
			_opt = false;
			};
		
		// Spawn new crowd if needed
		if (!_many && {!(_rain)} && {!(_battle)} && {!(_late)}) then
			{
			tpw_crowd_clothes = [] call tpw_core_fnc_clothes;
			[] call tpw_crowd_fnc_spawn;
			};	
			
		// Animate / disperse / despawn as appropriate	
		for "_i" from 0 to count tpw_crowd_array - 1 do
			{
			_civ = tpw_crowd_array select _i;	
			_dist = _civ distance player;
			_mov = _civ getvariable ["tpw_crowd_move",0];			
			_vis = 1;
			_spd = speed _civ;
			_dam = damage _civ;
			if (_mov > 0) then
				{
				if (lineintersects [eyepos _civ,eyePos player]) then
					{
					_vis = 0;
					};	
				}; 
			if (_dam > 0) then
				{
				_civ enablesimulation true;
				_civ domove position (nearestbuilding _civ);
				_civ setvariable ["tpw_crowd_move",_mov + 1]; 
				// Delete civ
				if ((_mov > 30 && {_vis == 0})) then
					{
					tpw_crowd_array set [_i,-1];
					deletegroup (group _civ);
					deletevehicle _civ;
					};	
				} else
				
				{
				// Nearby cars
				if (count (_civ nearentities ["car",8]) > 0) then
					{
					_nearcars = true;
					}else
					{
					_nearcars = false;
					};				
				
				// Simulation enable conditions
				if (
				_battle || // battle, obviously
				_nearcars || // cars nearby
				(_mov > 0) || // already moving
				(_opt && {_vis ==1}) || // looking through optics and visible
				(_dist  < tpw_crowd_animradius && {_vis == 1}) || // close enough and visible
				(_dist < tpw_crowd_animradius / 2) // very close, regardless of visibility
				) then
					{
					_civ enablesimulation true;	
					if (random 1 > 0.9) then {[_civ] spawn tpw_crowd_fnc_talk};
					
					// Keep anims looping, no crouching
					if (_spd == 0) then 
						{
						if (animationState _civ != (_civ getvariable "tpw_crowd_anim") && {damage _civ == 0}) then
							{
							_civ switchmove "";
							_civ playmove (_civ getvariable "tpw_crowd_anim");
							};
							
						// Disperse crowds if gunfire, explosions, rain	
						if ((_battle || _rain)) then
							{
							if	(_vis == 1) then
								{
								_civ setvariable ["tpw_crowd_move",1];
								_civ setspeedmode "FULL";
								_civ forcespeed 4;
								_civ enablesimulation true;
								_civ setAnimSpeedCoef 0.7 + random 0.2;
								_civ switchmove "";
								_civ enableai "MOVE";
								_civ enableai "ANIM";
								_civ setunitpos "UP";
								_dests = nearestTerrainObjects [position _civ,["building","house"],50,false];
								_dest = position (_dests select (floor random count _dests));
								_civ domove _dest;
								} else
								{
								_civ setvariable ["tpw_crowd_move",10];
								};
							}; 

						// Disperse crowds if player close by, cars close by, or it's late
						if (_nearcars || _late || (_dist  < tpw_crowd_moveradius && {_vis == 1})) then
							{
							_civ setvariable ["tpw_crowd_move",1];
							_civ enablesimulation true;
							_civ setAnimSpeedCoef 0.7 + random 0.2;
							_civ switchmove "";
							_civ enableai "MOVE";
							_civ enableai "ANIM";
							_civ setunitpos "UP";
							_dests = nearestTerrainObjects [position _civ,["building","house"],50,false];
							_dest = position (_dests select (floor random count _dests));
							_civ domove _dest;
							};
						} else
						{
						// No cowering
						if (stance _civ != "STAND" && {_dam == 0}) then
							{
							_civ switchmove "";
							};
						
						// Movement speed
						if (_battle || _rain || (!weaponlowered player && {_dist < 25})) then
							{
							_civ forcespeed 4
							;
							} else
							{
							_civ forcespeed -1;
							};
						};
					} else
					{
					_civ enablesimulation false;
					};	
				
				// Mark moving civ for deletion if it's not visible for long enough
				if (_mov > 0 && {_vis == 0 || _spd == 0}) then
					{
					_civ setvariable ["tpw_crowd_move",_mov + 1];
					};
				
				// Delete civ
				if ((_mov > 4 && {_vis == 0} && {_dist > 20}) || _dist > tpw_crowd_radius) then
					{
					tpw_crowd_array set [_i,-1];
					deletegroup (group _civ);
					deletevehicle _civ;
					};	
				};	
			};	
		tpw_crowd_array = tpw_crowd_array - [-1];	
		};	
	sleep tpw_crowd_scantime;
	};
