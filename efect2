   // ==================================================
    // FASE 1: ONDA REFRACTIVA + LUZ INICIAL
    // ==================================================
    drop [
        ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0, 1, 0],
        "", "Billboard", 1, _lifeTime,
        [0,0,0], [0,0,0],
        0, 12, 9.5, 0.12,
        _sizeArray,
        [[0.15,0.15,0.15,1],[0.6,0.6,0.6,1],[0,0,0,1],[0,0,0,0.4]],
        [1], 0.25, 0.25, "", "", _particleSource, 1, false, -1, [], [0,1,0]
    ];
    
    // Flash explosivo (más brillante)
    drop [
        ["#(argb,8,8,3)color(1,1,1,0.85)", 1, 0, 1], 
        "", "Billboard", 0.24, 0.12, 
        [0,0,0], [0,0,0], 
        0, 1.2, 1.2, 0, 
        [3.0 * PARTICLE_SIZE_MULT], 
        [[1,1,1,0.85],[1,1,1,0]], 
        [1.2], 0, 0, "", "", _particleSource
    ];
    
    // ==================================================
    // FASE 2: FRAGMENTACIÓN MEJORADA
    // ==================================================
    private _frags = [
        // Piedra (mejorado)
        ["#(argb,8,8,3)color(0.7,0.7,0.7,1)", [0.24,0.18,0.12] * PARTICLE_SIZE_MULT],
        // Carne (mejorado) 
        ["#(argb,8,8,3)color(0.5,0.1,0.1,1)", [0.24,0.18,0.06] * PARTICLE_SIZE_MULT],
        // Vidrio (mejorado)
        ["#(argb,8,8,3)color(0.5,0.5,1,0.85)", [0.24,0.12] * PARTICLE_SIZE_MULT],
        // Madera (mejorado)
        ["#(argb,8,8,3)color(0.4,0.3,0.2,1)", [0.3,0.24,0.12] * PARTICLE_SIZE_MULT]
    ];
    
    {
        private _tex = _x select 0;
        private _sizes = _x select 1;
        
        for "_i" from 0 to floor(3 * PARTICLE_COUNT_MULT) do {
            drop [
                [_tex, 1, 0, 1], 
                "", "Billboard", 
                1.8, 1.45, 
                [0,0,0], 
                [random 0.3 - 0.15, random 0.3 - 0.15, random 0.5], 
                random 2, 
                0.48, 0.48, 0.12, 
                _sizes, 
                [[1,1,1,1],[0,0,0,0.36],[0,0,0,0]], 
                [1.0], 
                0.24, 0.24, 
                "", "", _particleSource
            ];
        };
    } forEach _frags;
    
    // ==================================================
    // FASE 3: EFECTOS VISUALES MEJORADOS
    // ==================================================
    
    // Glow central (más brillante)
    drop [
        ["#(argb,8,8,3)color(1,1,1,0.7)", 1, 0, 1], 
        "", "Billboard", 
        2.4, 1.8, 
        [0,0,0], [0,0,0], 
        0, 0.12, 0.12, 0.06, 
        [0.36, 0.12] * PARTICLE_SIZE_MULT, 
        [[1,1,1,0.7],[1,1,1,0.36],[1,1,1,0]], 
        [1.2], 
        0.12, 0.12, 
        "", "", _particleSource
    ];
    
    // Chispas tipo T800 (más numerosas)
    for "_i" from 0 to floor(4 * PARTICLE_COUNT_MULT) do {
        drop [
            ["#(argb,8,8,3)color(1,0.2,0.2,1)", 1, 0, 1], 
            "", "Billboard", 
            0.72, 0.95, 
            [0,0,0], 
            [random 0.3 - 0.15, random 0.3 - 0.15, random 0.4], 
            random 2, 
            1.2, 1.2, 0.24, 
            [0.12, 0.06] * PARTICLE_SIZE_MULT, 
            [[1,0.2,0.2,1],[1,0.1,0.1,0.6],[0,0,0,0]], 
            [1.2], 
            0.24, 0.24, 
            "", "", _particleSource
        ];
    };
    
    // Carbón incandescente (más brillante)
    for "_i" from 0 to floor(3 * PARTICLE_COUNT_MULT) do {
        drop [
            ["#(argb,8,8,3)color(1,0.4,0,1)", 1, 0, 1], 
            "", "Billboard", 
            1.8, 3.0, 
            [0,0,0], 
            [random 0.25 - 0.125, random 0.25 - 0.125, random 0.3], 
            random 1.5, 
            0.6, 0.6, 0.12, 
            [0.6, 0.48, 0.36] * PARTICLE_SIZE_MULT, 
            [[1,0.4,0,1],[0.5,0.2,0,0.7],[0,0,0,0]], 
            [1.2], 
            0.36, 0.36, 
            "", "", _particleSource
        ];
    };
    
    // ==================================================
    // FASE 4: SONIDO (MEJORADO)
    // ==================================================
    playSound3D ["A3\Sounds_F\weapons\Explosion\expl_big_2.wss", objNull, false, _particlePos, 3.6, 1, 120];
    
    // Eco a distancia con retardo
    [_particlePos] spawn {
        params ["_pos"];
        sleep 0.6; // Retardo ligeramente superior
        playSound3D ["A3\Sounds_F\weapons\Explosion\expl_big_distance_01.wss", objNull, false, _pos, 2.4, 0.9, 240];
    };
    
    // ==================================================
    // FASE 5: EFECTOS SECUNDARIOS
    // ==================================================
    
    // Polvo residual
    [_particlePos, _particleSource] spawn {
        params ["_pos", "_source"];
        sleep 1.0;
        
        drop [
            ["#(argb,8,8,3)color(0.4,0.4,0.4,0.36)", 1, 0, 1], 
            "", "Billboard", 
            4.8, 2.4, 
            [0,0,0], [0,0,0.24], 
            0, 0.24, 0.24, 0.06, 
            [3.0, 2.4, 1.2] * PARTICLE_SIZE_MULT, 
            [[0.4,0.4,0.4,0.36],[0.2,0.2,0.2,0.12],[0,0,0,0]], 
            [1.0], 
            0.12, 0.12, 
            "", "", _source
        ];
    };
    
    deleteVehicle _particleSource;
    true
};

// ======================================================
// EFECTOS DE EXPLOSIÓN EXTREMA
// ======================================================

extremeExplosionEffect = {
    params ["_particlePos", "_size"];
    
    private _strength = 1.2;
    
    private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _particlePos, true];
    
    private _dropParams = switch (_size) do {
        case "medium": {
            [0.36 * _strength, [1.2,1.2,7.2,14.4,28.8,38.4,57.6]]
        };
        case "small": {
            [0.15 * _strength, [1.2,2.4,6.0,9.6,14.4,20.4]]
        };
        case "tiny": {
            [0.12 * _strength, [0.6,1.2,3.0,4.8,7.2,10.2]]
        };
        case "large": {
            [0.48 * _strength, [2.4,2.4,28.8,72,126,180,252]]
        };
        default {
            [0.24 * _strength, [1.2,1.2,7.2,14.4,28.8,38.4,57.6]]
        };
    };
    
    private _lifeTime = _dropParams select 0;
    private _sizeArray = _dropParams select 1;
    
    // Onda de refracción extremadamente mejorada
    drop [
        ["\A3\data_f\ParticleEffects\Universal\Refract", 1, 0],
        "", "Billboard", 1, _lifeTime,
        [0,0,0], [0,0,0],
        0, 12, 9.5, 0.12,
        _sizeArray,
        [
            [0.15,0.15,0.15,1],[0.3,0.3,0.3,1],
            [0.6,0.6,0.6,1],[0,0,0,1],
            [0,0,0,0.6],[0,0,0,0.4]
        ],
        [1], 0.25, 0.25,
        "", "", _particleSource, 1, false, -1, [], [0,1,0]
    ];
    
    // Fragmentos de piedra extremadamente mejorados
    for "_i" from 0 to floor(5 * PARTICLE_COUNT_MULT) do {
        drop [
            ["\A3\data_f\ParticleEffects\Pstone\Data\pstone_nohq.paa", 1, 0, 1], 
            "", "Billboard", 
            72, 54, 
            [0,0,0], 
            [random 8 - 4, random 8 - 4, random [4, 8, 12]], 
            random [2, 4, 6], 
            2.4, 2.4, 0.24, 
            [0.48, 0.42, 0.24] * PARTICLE_SIZE_MULT, 
            [[0.7,0.7,0.7,1],[0.4,0.4,0.4,0.6],[0,0,0,0]], 
            [0.8], 
            0.36, 0.36, 
            "", "", _particleSource
        ];
    };
    
    // Chispas extremadamente mejoradas
    for "_i" from 0 to floor(8 * PARTICLE_COUNT_MULT) do {
        drop [
            ["#(argb,8,8,3)color(1,0.2,0.2,1)", 1, 0, 1], 
            "", "Billboard", 
            12, 9.6, 
            [0,0,0], 
            [random [-4, 0, 4], random [-4, 0, 4], random [2, 4, 6]], 
            random [1, 2, 3], 
            2.4, 1.2, 0.24, 
            [0.24, 0.12] * PARTICLE_SIZE_MULT, 
            [[1,0.2,0.2,1],[1,0.1,0.1,0.6],[0,0,0,0]], 
            [1.2], 
            0.24, 0.24, 
            "", "", _particleSource
        ];
    };
    
    // Carbón incandescente extremadamente mejorado
    for "_i" from 0 to floor(6 * PARTICLE_COUNT_MULT) do {
        drop [
            ["#(argb,8,8,3)color(1,0.4,0,1)", 1, 0, 1], 
            "", "Billboard", 
            36, 30, 
            [0,0,0], 
            [random [-1, 0, 1], random [-1, 0, 1], random [0.5, 1, 1.5]], 
            random [0.5, 1, 1.5], 
            0.6, 0.6, 0.12, 
            [0.6, 0.48, 0.36] * PARTICLE_SIZE_MULT, 
            [[1,0.4,0,1],[0.5,0.2,0,0.7],[0,0,0,0]], 
            [1.2], 
            0.36, 0.36, 
            "", "", _particleSource
        ];
    };
    
    // Glow superficial extremadamente mejorado
    drop [
        ["#(argb,8,8,3)color(1,1,1,0.85)", 1, 0, 1], 
        "", "Billboard", 
        6, 3.6, 
        [0,0,0], 
        [0,0,0.12], 
        0.24, 0.36, 0.24, 0.06, 
        [0.72, 0.48, 0.24] * PARTICLE_SIZE_MULT, 
        [[1,1,1,0.85],[1,1,1,0.4],[1,1,1,0]], 
        [1.2], 
        0.24, 0.24, 
        "", "", _particleSource
    ];
    
    // Fragmentos de carne extremadamente mejorados
    for "_i" from 0 to floor(4 * PARTICLE_COUNT_MULT) do {
        drop [
            ["#(argb,8,8,3)color(0.5,0.1,0.1,1)", 1, 0, 1], 
            "", "Billboard", 
            24, 18, 
            [0,0,0], 
            [random [-0.5, 0, 0.5], random [-0.5, 0, 0.5], random [0.5, 1, 1.5]], 
            random [0.25, 0.5, 0.75], 
            0.36, 0.48, 0.06, 
            [0.36, 0.24, 0.12] * PARTICLE_SIZE_MULT, 
            [[0.5,0.1,0.1,1],[0.2,0.05,0.05,0.6],[0,0,0,0]], 
            [1.0], 
            0.24, 0.18, 
            "", "", _particleSource
        ];
    };
    
    // Fragmentos de vidrio extremadamente mejorados
    for "_i" from 0 to floor(5 * PARTICLE_COUNT_MULT) do {
        drop [
            ["#(argb,8,8,3)color(0.5,0.5,1,0.85)", 1, 0, 1], 
            "", "Billboard", 
            30, 24, 
            [0,0,0], 
            [random [-1, 0, 1], random [-1, 0, 1], random [1, 1.5, 2]], 
            random [0.5, 1, 1.5], 
            0.6, 0.48, 0.12, 
            [0.36, 0.24] * PARTICLE_SIZE_MULT, 
            [[0.5,0.5,1,0.85],[0.2,0.2,0.5,0.5],[0,0,0,0]], 
            [1.2], 
            0.12, 0.12, 
            "", "", _particleSource
        ];
    };
    
    // Luz explosiva extremadamente mejorada
    drop [
        ["#(argb,8,8,3)color(1,0.5,0,1)", 1, 0, 1], 
        "", "Billboard", 
        3.6, 6, 
        [0,0,0], 
        [0,0,0], 
        0, 0.95, 0.72, 0.24, 
        [0.48, 0.12] * PARTICLE_SIZE_MULT, 
        [[1,0.5,0,1],[1,0.2,0,0.7],[0,0,0,0]], 
        [1.2], 
        0.36, 0.36, 
        "", "", _particleSource
    ];
    
    // Fragmentos de madera extremadamente mejorados
    for "_i" from 0 to floor(5 * PARTICLE_COUNT_MULT) do {
        drop [
            ["#(argb,8,8,3)color(0.4,0.3,0.2,1)", 1, 0, 1], 
            "", "Billboard", 
            48, 36, 
            [0,0,0], 
            [random [-0.25, 0, 0.25], random [-0.25, 0, 0.25], random [0.25, 0.5, 0.75]], 
            random [0.5, 0.75, 1], 
            0.6, 0.48, 0.12, 
            [0.48, 0.36, 0.24] * PARTICLE_SIZE_MULT, 
            [[0.4,0.3,0.2,1],[0.2,0.15,0.1,0.7],[0,0,0,0]], 
            [1.0], 
            0.24, 0.24, 
            "", "", _particleSource
        ];
    };
    
    // Fuego radiante extremadamente persistente
    drop [
        ["#(argb,8,8,3)color(1,0.3,0,1)", 1, 0, 1], 
        "", "Billboard", 
        18, 14.5, 
        [0,0,0], 
        [random [-0.1, 0, 0.1], random [-0.1, 0, 0.1], random [0.05, 0.1, 0.15]], 
        random [0.25, 0.5, 0.75], 
        0.36, 0.3, 0.06, 
        [0.48, 0.36, 0.24] * PARTICLE_SIZE_MULT, 
        [[1,0.3,0,1],[1,0.2,0,0.7],[0,0,0,0]], 
        [1.2], 
        0.36, 0.36, 
        "", "", _particleSource
    ];
    
    // Humo negro ascendente extremadamente persistente
    for "_i" from 0 to floor(3 * PARTICLE_COUNT_MULT) do {
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 8, 0], 
            "", "Billboard", 
            30, 24, 
            [0,0,0], 
            [random [-0.1, 0, 0.1], random [-0.1, 0, 0.1], random [0.5, 0.75, 1]], 
            random [0.15, 0.3, 0.45], 
            0.24, 0.24, 0.06, 
            [0.72, 0.96, 1.44] * PARTICLE_SIZE_MULT, 
            [[0.1,0.1,0.1,0.5],[0.1,0.1,0.1,0.4],[0.1,0.1,0.1,0.3],[0.1,0.1,0.1,0.2],[0.1,0.1,0.1,0.1],[0.1,0.1,0.1,0]], 
            [0.1], 
            0.12, 0.12, 
            "", "", _particleSource
        ];
    };
    
    // Sonido explosivo extremadamente impactante
    playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_2.wss", objNull, false, _particlePos, 4, 0.9, 150];
    
    // Eco ambiental mejorado
    [_particlePos] spawn {
        params ["_pos"];
        sleep 0.5;
        playSound3D ["A3\\Sounds_F\\weapons\\Explosion\\expl_big_distance_01.wss", objNull, false, _pos, 2.5, 0.9, 300];
    };
    
    // Efectos de luz
    private _light1 = "#lightpoint" createVehicleLocal _particlePos;
    _light1 setLightBrightness 2.5;
    _light1 setLightAmbient [0.8, 0.6, 0.2];
    _light1 setLightColor [1.0, 0.8, 0.3];
    _light1 setLightFlareSize 200;
    _light1 setLightFlareMaxDistance 5000;
    _light1 setLightUseFlare true;
    
    // Eliminación retardada de luz
    [_light1] spawn {
        params ["_light"];
        sleep 0.3;
        _light setLightBrightness 1.0;
        sleep 0.2;
        _light setLightBrightness 0.3;
        sleep 0.1;
        deleteVehicle _light;
    };
    
    deleteVehicle _particleSource;
    true
};

// ======================================================
// EFECTOS DE SANGRE Y HERIDAS
// ======================================================

bloodSplatterEffect = {
    params [["_pos", [0,0,0], [[]]], ["_dir", 0, [0]], ["_intensity", 1, [0]]];
    
    // Ajuste de intensidad mejorado
    _intensity = _intensity * PARTICLE_SIZE_MULT;
    
    // Crear objeto emisor
    private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _pos, true];
    
    // Spray principal de sangre
    for "_i" from 0 to (round(6 * _intensity * PARTICLE_COUNT_MULT)) do {
        private _particleDir = _dir + (random 40 - 20);
        private _particleSpeed = 3 + random 2;
        
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 1, 0],
            "", "Billboard", 1, 2.0,
            [0, 0, 0],
            [sin _particleDir * _particleSpeed, cos _particleDir * _particleSpeed, 0.5 + random 1.2],
            1, 0.4, 0.32, 0.06,
            [0.24, 0.36, 0.18] * _intensity,
            [[0.7, 0, 0, 0.8], [0.4, 0, 0, 0.5], [0.2, 0, 0, 0]],
            [0.6], 0.36, 0.24,
            "", "", _particleSource
        ];
    };
    
    // Gotas secundarias
    for "_i" from 0 to (round(9 * _intensity * PARTICLE_COUNT_MULT)) do {
        private _particleDir = _dir + (random 90 - 45);
        private _particleSpeed = 0.5 + random 2.5;
        
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 1, 0],
            "", "Billboard", 1, 1.5 + random 1,
            [0, 0, 0],
            [sin _particleDir * _particleSpeed, cos _particleDir * _particleSpeed, -0.8 - random 1.4],
            1, 0.35, 0.25, 0.06,
            [0.06, 0.12, 0.03] * _intensity,
            [[0.7, 0, 0, 0.8], [0.4, 0, 0, 0.6], [0.2, 0, 0, 0]],
            [0.6], 0.36, 0.24,
            "", "", _particleSource
        ];
    };
    
    // Charco de sangre
    if (_intensity > 0.6) then {
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 1, 0],
            "", "Billboard", 1, 9.0,
            [0, 0, 0],
            [0, 0, 0],
            0, 0.25, 0.2, 0,
            [0.36, 0.72, 0.6] * _intensity,
            [[0.6, 0, 0, 0.7], [0.4, 0, 0, 0.5], [0.2, 0, 0, 0]],
            [0.6], 0, 0,
            "", "", _particleSource
        ];
    };
    
    deleteVehicle _particleSource;
};

bloodMistEffect = {
    params [["_pos", [0,0,0], [[]]], ["_intensity", 1, [0]]];
    
    // Ajustar intensidad
    _intensity = _intensity * PARTICLE_SIZE_MULT;
    
    // Crear objeto emisor
    private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _pos, true];
    
    // Niebla sangrienta difusa
    for "_i" from 0 to (round(4 * _intensity * PARTICLE_COUNT_MULT)) do {
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 9, 0],
            "", "Billboard", 1, 3.0,
            [0, 0, 0],
            [random 1 - 0.5, random 1 - 0.5, 0.3 + random 0.8],
            0, 0.2, 0.15, 0.06,
            [0.6, 1.2, 0.6] * _intensity,
            [[0.5, 0, 0, 0.3], [0.3, 0, 0, 0.15], [0.2, 0, 0, 0]],
            [0.6], 0.1, 0.1,
            "", "", _particleSource
        ];
    };
    
    // Gotas de sangre definidas
    for "_i" from 0 to (round(6 * _intensity * PARTICLE_COUNT_MULT)) do {
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 13, 1, 0],
            "", "Billboard", 1, 1.5 + random 1,
            [0, 0, 0],
            [random 2 - 1, random 2 - 1, random 1 - 0.2],
            1, 0.35, 0.25, 0.06,
            [0.06, 0.12, 0.03] * _intensity,
            [[0.7, 0, 0, 0.8], [0.4, 0, 0, 0.6], [0.2, 0, 0, 0]],
            [0.6], 0.36, 0.24,
            "", "", _particleSource
        ];
    };
    
    deleteVehicle _particleSource;
};

// ======================================================
// EFECTOS DE DISPAROS Y ARMAS
// ======================================================

muzzleFlashEffect = {
    params [["_pos", [0,0,0], [[]]], ["_dir", 0, [0]], ["_size", 1.0, [0]]];
    
    // Ajustar tamaño
    _size = _size * PARTICLE_SIZE_MULT;
    
    // Crear objeto emisor
    private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _pos, true];
    
    // Destello principal
    drop [
        ["#(argb,8,8,3)color(1,0.85,0.4,1)", 1, 0, 1], 
        "", "Billboard", 1, 0.08,
        [0, 0, 0],
        [0, 0, 0],
        0, 1.3, 1.1, 0,
        [0.25, 0.15] * _size,
        [[1, 0.85, 0.4, 1], [1, 0.7, 0.3, 0]],
        [1], 0, 0,
        "", "", _particleSource, _dir
    ];
    
    // Halo secundario
    drop [
        ["#(argb,8,8,3)color(1,0.65,0.2,0.8)", 1, 0, 1], 
        "", "Billboard", 1, 0.1,
        [0, 0, 0],
        [0, 0, 0],
        0, 1.2, 1.0, 0,
        [0.35, 0.15] * _size,
        [[1, 0.7, 0.3, 0.85], [0.8, 0.5, 0.2, 0]],
        [1], 0, 0,
        "", "", _particleSource, _dir
    ];
    
    // Humo (más visible)
    drop [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 7, 48, 0],
        "", "Billboard", 1, 1.8,
        [0, 0, 0],
        [sin _dir * 2.2, cos _dir * 2.2, 0.6],
        0, 0.08, 0.07, 0.025,
        [0.15, 0.3, 0.45] * _size,
        [[0.7, 0.7, 0.7, 0.2], [0.8, 0.8, 0.8, 0.1], [0.9, 0.9, 0.9, 0]],
        [0.6], 0.25, 0.25,
        "", "", _particleSource
    ];
    
    // Chispas (opcional para armas grandes)
    if (_size > 0.9) then {
        for "_i" from 0 to floor(3 * PARTICLE_COUNT_MULT) do {
            private _sparkDir = _dir + (random 35 - 17.5);
            private _sparkVel = 2.5 + random 2;
            drop [
                ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 2, 32, 0],
                "", "Billboard", 1, 0.6 + random 0.6,
                [0, 0, 0],
                [sin _sparkDir * _sparkVel, cos _sparkDir * _sparkVel, random 1.2 - 0.6],
                1, 0.13, 0.11, 0,
                [0.06, 0.03] * _size,
                [[1, 0.85, 0.4, 1], [1, 0.7, 0.3, 0.5], [1, 0.5, 0.2, 0]],
                [0.6], 0, 0,
                "", "", _particleSource
            ];
        };
    };
    
    deleteVehicle _particleSource;
};

bulletImpactEffect = {
    params [["_pos", [0,0,0], [[]]], ["_norm", [0,0,1], [[]]], ["_material", "concrete", [""]]];
    
    // Crear objeto emisor
    private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _pos, true];
    
    // Determinar color según material
    private _colors = switch (_material) do {
        case "concrete";
        case "stone";
        case "rock": {[[0.8, 0.8, 0.8, 1], [0.7, 0.7, 0.7, 0.5], [0.5, 0.5, 0.5, 0]]};
        
        case "wood";
        case "wooden";
        case "plank": {[[0.7, 0.5, 0.3, 0.8], [0.6, 0.4, 0.2, 0.5], [0.5, 0.3, 0.15, 0]]};
        
        case "metal";
        case "steel";
        case "iron": {[[0.9, 0.9, 1, 1], [0.8, 0.8, 0.9, 0.5], [0.6, 0.6, 0.7, 0]]};
        
        case "dirt";
        case "soil";
        case "ground": {[[0.6, 0.5, 0.4, 0.8], [0.5, 0.4, 0.3, 0.5], [0.4, 0.3, 0.2, 0]]};
        
        case "sand": {[[0.8, 0.7, 0.5, 0.8], [0.7, 0.6, 0.4, 0.5], [0.6, 0.5, 0.3, 0]]};
        
        case "grass": {[[0.5, 0.6, 0.3, 0.8], [0.4, 0.5, 0.3, 0.5], [0.3, 0.4, 0.2, 0]]};
        
        default {[[0.7, 0.7, 0.7, 0.8], [0.6, 0.6, 0.6, 0.5], [0.5, 0.5, 0.5, 0]]};
    };
    
    // Calcular matriz de rotación (necesaria para orientar partículas)
    private _zaxis = _norm;
    private _xaxis = [0, 0, 1] vectorCrossProduct _zaxis;
    if (_xaxis isEqualTo [0, 0, 0]) then {_xaxis = [1, 0, 0]};
    private _yaxis = _zaxis vectorCrossProduct _xaxis;
    private _matrix = [_xaxis, _yaxis, _zaxis];
    
    // Función auxiliar para multiplicar vector por matriz
    private _fnc_matrixMult = {
        params ["_vector", "_matrix"];
        private _result = [0,0,0];
        for "_i" from 0 to 2 do {
            _result set [_i, ((_vector select 0) * ((_matrix select 0) select _i)) + 
                             ((_vector select 1) * ((_matrix select 1) select _i)) + 
                             ((_vector select 2) * ((_matrix select 2) select _i))];
        };
        _result
    };
    
    // Chispas / fragmentos
    for "_i" from 0 to (4 + floor(random 5)) do {
        private _velVec = [random 2 - 1, random 2 - 1, random 1];
        private _vel = [_velVec, _matrix] call _fnc_matrixMult;
        _vel = _vel vectorMultiply (2.5 + random 1);
        
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 2, 80, 0],
            "", "Billboard", 1, 0.3 + random 0.3,
            [0, 0, 0],
            _vel,
            random 1.2, 0.09, 0.08, 0,
            [0.09, 0.04, 0.02] * PARTICLE_SIZE_MULT,
            [[1, 0.85, 0.4, 1], [1, 0.65, 0.2, 0.6], [1, 0.5, 0.1, 0]],
            [0.6], 0.25, 0.25,
            "", "", _particleSource, random 360
        ];
    };
    
    // Polvo de impacto
    drop [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
        "", "Billboard", 1, 0.6 + random 0.6,
        [0, 0, 0],
        (_norm vectorMultiply (0.6 + random 0.6)),
        0, 0.08, 0.06, 0.03,
        [0.12, 0.6, 0.96],
        _colors,
        [0.6], 0.18, 0.18,
        "", "", _particleSource
    ];
    
    // Fragmentos del material
    for "_i" from 0 to (2 + floor(random 3)) do {
        private _velVec = [random 1 - 0.5, random 1 - 0.5, random 0.6];
        private _vel = [_velVec, _matrix] call _fnc_matrixMult;
        _vel = _vel vectorMultiply (1.8 + random 0.6);
        
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
            "", "Billboard", 1, 1.0 + random 1.0,
            [0, 0, 0],
            _vel,
            1, 0.09, 0.08, 0.03,
            [0.04, 0.06, 0.03] * PARTICLE_SIZE_MULT,
            _colors,
            [0.6], 0.18, 0.18,
            "", "", _particleSource
        ];
    };
    
    // Cráter/marca del impacto (más visible)
    if (_material != "metal" && _material != "steel") then {
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
            "", "Billboard", 1, 12.0,
            [0, 0, 0],
            [0, 0, 0],
            0, 0.06, 0.05, 0,
            [0.1, 0.1],
            [_colors#0, _colors#1, [0,0,0,0]],
            [0.1], 0, 0,
            "", "", _particleSource, 0, true
        ];
    };
    
    // Sonidos según material
    private _sound = switch (_material) do {
        case "concrete";
        case "stone";
        case "rock": {"A3\Sounds_F\weapons\hits\concrete_1.wss"};
        
        case "wood";
        case "wooden";
        case "plank": {"A3\Sounds_F\weapons\hits\wood_1.wss"};
        
        case "metal";
        case "steel";
        case "iron": {"A3\Sounds_F\weapons\hits\metal_1.wss"};
        
        case "dirt";
        case "soil";
        case "ground";
        case "sand": {"A3\Sounds_F\weapons\hits\sand_1.wss"};
        
        case "grass": {"A3\Sounds_F\weapons\hits\grass_1.wss"};
        
        default {"A3\Sounds_F\weapons\hits\concrete_1.wss"};
    };
    
    // Reproducir sonido
    playSound3D [_sound, objNull, false, _pos, 0.7, 1, 30];
    
    deleteVehicle _particleSource;
};

// ======================================================
// EFECTOS DE AGUA
// ======================================================

waterSplashEffect = {
    params [["_pos", [0,0,0], [[]]], ["_size", "medium", [""]]];
    
    // Determinar escala según tamaño
    private _scale = switch (_size) do {
        case "tiny":   {0.36};
        case "small":  {0.72};
        case "medium": {1.2};
        case "large":  {2.16};
        case "huge":   {3.6};
        default        {1.2};
    };
    
    // Crear objeto emisor
    private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _pos, true];
    
    // Columna central de agua
    drop [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
        "", "Billboard", 1, 1.8 * _scale,
        [0, 0, 0], [0, 0, 4.8 * _scale],
        0, 0.6, 0.5, 0,
        [1.2 * _scale, 2.4 * _scale, 3.6 * _scale],
        [[0.7, 0.8, 1, 0.6], [0.7, 0.8, 1, 0.6], [0.7, 0.8, 1, 0]],
        [0.12], 0, 0, "", "", _particleSource
    ];
    
    // Gotas de agua principales
    for "_i" from 0 to (6 * _scale) do {
        private _dir = random 360;
        private _speed = 3.6 + random 2.4;
        private _height = 1.8 + random 2.4;
        
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
            "", "Billboard", 1, 1.45 * _scale,
            [0, 0, 0],
            [sin _dir * _speed, cos _dir * _speed, _height],
            1, 0.6, 0.5, 0.06,
            [0.12 * _scale, 0.18 * _scale, 0.18 * _scale],
            [[0.7, 0.8, 1, 0.85], [0.7, 0.8, 1, 0.6], [0.7, 0.8, 1, 0]],
            [0.12], 1, 0, "", "", _particleSource
        ];
    };
    
    // Gotas de agua pequeñas (spray)
    for "_i" from 0 to (18 * _scale) do {
        private _dir = random 360;
        private _speed = 2.4 + random 3.6;
        private _height = 0.6 + random 1.2;
        
        drop [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
            "", "Billboard", 1, 0.95 * _scale,
            [0, 0, 0],
            [sin _dir * _speed, cos _dir * _speed, _height],
            1, 0.6, 0.5, 0.06,
            [0.06 * _scale, 0.12 * _scale, 0.06 * _scale],
            [[0.7, 0.8, 1, 0.6], [0.7, 0.8, 1, 0.4], [0.7, 0.8, 1, 0]],
            [0.12], 1, 0, "", "", _particleSource
        ];
    };
    
    // Anillo de ondas
    drop [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
        "", "Billboard", 1, 3.0 * _scale,
        [0, 0, 0], [0, 0, 0],
        0, 0.6, 0.5, 0,
        [0.6 * _scale, 4.8 * _scale, 9.6 * _scale],
        [[0.7, 0.8, 1, 0.4], [0.7, 0.8, 1, 0.25], [0.7, 0.8, 1, 0]],
        [0.12], 0, 0, "", "", _particleSource
    ];
    
    // Reproducir sonido
    private _soundFile = switch (_size) do {
        case "tiny":   {"A3\Sounds_F\weapons\pools\water_splash_small2.wss"};
        case "small":  {"A3\Sounds_F\weapons\pools\water_splash_small1.wss"};
        case "medium": {"A3\Sounds_F\weapons\pools\battle_splash1.wss"};
        case "large":  {"A3\Sounds_F\weapons\pools\battle_splash2.wss"};
        case "huge":   {"A3\Sounds_F\weapons\pools\battle_splash3.wss"};
        default        {"A3\Sounds_F\weapons\pools\battle_splash1.wss"};
    };
    
    playSound3D [_soundFile, objNull, false, _pos, 2.4, 1, 120];
    
    deleteVehicle _particleSource;
};

underwaterBubblesEffect = {
    params [["_pos", [0,0,0], [[]]], ["_intensity", 1, [0]]];
    
    if (player distance _pos > 80) exitWith {false};
    
    // Crear fuente de emisión
    private _bubbleEmitter = "#particlesource" createVehicleLocal _pos;
    
    // Configurar el emisor
    _bubbleEmitter setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
        "", "Billboard", 1, 4.8 * _intensity,
        [0, 0, 0], [0, 0, 1.2],
        0, 0.25, 0.2, 0.06,
        [0.06, 0.12, 0.18],
        [[1, 1, 1, 0.25], [1, 1, 1, 0.15], [1, 1, 1, 0]],
        [0.12], 1, 0, "", "", ""
    ];
    
    _bubbleEmitter setParticleRandom [
        1, [0.25, 0.25, 0.25], [0.12, 0.12, 0.12], 0, 0.12, [0, 0, 0, 0], 0, 0
    ];
    
    _bubbleEmitter setDropInterval (0.04 / _intensity);
    
    // Retornar el emisor para eliminación posterior
    _bubbleEmitter
};

// ======================================================
// EFECTOS DE FUEGO
// ======================================================

fireEffect = {
    params [["_pos", [0,0,0], [[]]], ["_size", "medium", [""]]];
    
    if (player distance _pos > 200) exitWith {false};
    
    // Determinar escala según tamaño
    private _scale = switch (_size) do {
        case "tiny":   {0.48};
        case "small":  {0.84};
        case "medium": {1.2};
        case "large":  {1.8};
        case "huge":   {3.0};
        default        {1.2};
    };
    
    // Crear emisores
    private _flame = "#particlesource" createVehicleLocal _pos;
    private _smoke = "#particlesource" createVehicleLocal _pos;
    private _sparks = "#particlesource" createVehicleLocal _pos;
    private _light = "#lightpoint" createVehicleLocal _pos;
    
    // Configurar llamas
    _flame setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 1, 12, 0], 
        "", "Billboard",
        1, 0.85 * _scale, 
        [0, 0, 0], 
        [0, 0, 0.6 * _scale], 
        0, 0.07, 0.05, 0.06,
        [0.72 * _scale, 1.8 * _scale, 0.6 * _scale],
        [
            [1, 1, 1, 0], 
            [1, 0.9, 0.6, 0.8], 
            [1, 0.7, 0.3, 0.8], 
            [1, 0.4, 0.2, 0.6], 
            [1, 0, 0, 0]
        ],
        [0.9, 0.4, 0.3], 1, 0, "", "", ""
    ];
    
    _flame setParticleRandom [
        0.6, 
        [0.3 * _scale, 0.3 * _scale, 0.12 * _scale], 
        [0.25, 0.25, 0.6], 
        0.6, 0.4, 
        [0, 0, 0, 0], 
        0, 0
    ];
    
    _flame setDropInterval (0.025 / _scale);
    
    // Configurar humo
    _smoke setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 7, 48, 0], 
        "", "Billboard",
        1, 6 * _scale, 
        [0, 0, 0.6 * _scale], 
        [0, 0, 1.8 * _scale], 
        0, 0.06, 0.05, 0.04,
        [0.6 * _scale, 1.8 * _scale, 3.6 * _scale],
        [
            [0.1, 0.1, 0.1, 0.25], 
            [0.2, 0.2, 0.2, 0.3], 
            [0.3, 0.3, 0.3, 0.25], 
            [0.4, 0.4, 0.4, 0.15], 
            [0.5, 0.5, 0.5, 0.01]
        ],
        [0.3, 0.6], 1, 0, "", "", ""
    ];
    
    _smoke setParticleRandom [
        1.2, 
        [0.3 * _scale, 0.3 * _scale, 0.12 * _scale], 
        [0.25, 0.25, 0.4], 
        0.6, 0.4, 
        [0, 0, 0, 0], 
        0, 0
    ];
    
    _smoke setDropInterval (0.05 / _scale);
    
    // Configurar chispas (para fuegos medianos y grandes)
    if (_scale >= 1.0) then {
        _sparks setParticleParams [
            ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 2, 32, 0], 
            "", "Billboard",
            1, 1.5, 
            [0, 0, 0.3 * _scale], 
            [0, 0, 1.2], 
            1, 0.2, 0.15, 0.05,
            [0.03, 0.015, 0.005],
            [
                [1, 1, 1, 1], 
                [1, 0.85, 0.5, 1], 
                [1, 0.65, 0.1, 0]
            ],
            [0.08], 1, 0, "", "", ""
        ];
        
        _sparks setParticleRandom [
            0.2, 
            [0.15 * _scale, 0.15 * _scale, 0.1 * _scale], 
            [0.6, 0.6, 1.2], 
            0, 0.05, 
            [0, 0, 0, 0], 
            0, 0
        ];
        
        _sparks setDropInterval (0.05 / _scale);
    };
    
    // Configurar luz
    _light setLightBrightness (1.2 * _scale);
    _light setLightColor [1, 0.7, 0.35];
    _light setLightAmbient [0.15, 0.05, 0];
    _light setLightIntensity (60 * _scale);
    _light setLightAttenuation [0, 0, 0, 1.5, 6 * _scale, 12 * _scale];
    _light setLightFlareSize (0.5 * _scale);
    _light setLightFlareMaxDistance (180 * _scale);
    _light setLightUseFlare true;
    _light setLightDayLight true;
    
    // Retornar todas las fuentes para limpieza posterior
    [_flame, _smoke, _sparks, _light]
};
