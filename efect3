// ======================================================
// EFECTOS DE CLIMA Y AMBIENTE
// ======================================================

dustCloudEffect = {
    params [["_pos", [0,0,0], [[]]], ["_size", 1, [0]]];
    
    if (player distance _pos > 150) exitWith {false};
    
    // Crear emisor
    private _dustEmitter = "#particlesource" createVehicleLocal _pos;
    
    // Configurar parámetros
    _dustEmitter setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
        "", "Billboard", 1, 12,
        [0, 0, 0], 
        [0, 0, 0.1],
        0, 0.06, 0.05, 0.03,
        [1.2 * _size, 2.4 * _size, 3 * _size, 3.6 * _size],
        [
            [0.6, 0.5, 0.4, 0], 
            [0.6, 0.5, 0.4, 0.2], 
            [0.6, 0.5, 0.4, 0.15],
            [0.6, 0.5, 0.4, 0.1],
            [0.6, 0.5, 0.4, 0.05],
            [0.6, 0.5, 0.4, 0]
        ],
        [0.2], 0.1, 0.05,
        "", "", ""
    ];
    
    _dustEmitter setParticleRandom [
        3, [5 * _size, 5 * _size, 0.3],
        [0.25, 0.25, 0.1], 0.2, 0.1,
        [0, 0, 0, 0.1], 0.2, 0
    ];
    
    _dustEmitter setParticleCircle [
        7 * _size, [0, 0, 0]
    ];
    
    _dustEmitter setDropInterval (0.02 / (_size * 0.5));
    
    // Retornar el emisor
    _dustEmitter
};

// ======================================================
// EFECTOS DE PORTALES Y DISTORSIÓN
// ======================================================

portalEffect = {
    params [["_pos", [0,0,0], [[]]], ["_radius", 2, [0]], ["_color", [0.3, 0.6, 1], [[]]]];
    
    if (player distance _pos > 150) exitWith {false};
    
    // Crear emisores
    private _outer = "#particlesource" createVehicleLocal _pos;
    private _inner = "#particlesource" createVehicleLocal _pos;
    private _glow = "#particlesource" createVehicleLocal _pos;
    private _light = "#lightpoint" createVehicleLocal _pos;
    
    // Emisor exterior (rotación)
    _outer setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
        "", "Billboard", 1, 3.6,
        [0, 0, 0], [0, 0, 0],
        2, 0.06, 0.05, 0,
        [_radius * 0.85, _radius * 1.2, _radius * 1.3, _radius * 1.1],
        [
            [_color select 0, _color select 1, _color select 2, 0],
            [_color select 0, _color select 1, _color select 2, 0.4],
            [_color select 0, _color select 1, _color select 2, 0.6],
            [_color select 0, _color select 1, _color select 2, 0]
        ],
        [0.1], 1, 0, "", "", ""
    ];
    
    _outer setParticleRandom [
        0, [0, 0, 0], [0, 0, 0], 0, 0, [0, 0, 0, 0], 0, 0
    ];
    
    _outer setParticleCircle [
        _radius, [0, 0, 0]
    ];
    
    _outer setDropInterval 0.008;
    
    // Emisor interior (vórtice)
    _inner setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 12, 13, 0],
        "", "Billboard", 1, 2.4,
        [0, 0, 0], [0, 0, 0.6],
        1, 0.06, 0.05, 0.06,
        [_radius * 0.5, _radius * 0.7, _radius * 0.6, _radius * 0.4],
        [
            [_color select 0, _color select 1, _color select 2, 0],
            [_color select 0, _color select 1, _color select 2, 0.6],
            [_color select 0, _color select 1, _color select 2, 0.85],
            [_color select 0, _color select 1, _color select 2, 0]
        ],
        [0.1], 0.1, 0.06, "", "", ""
    ];
    
    _inner setParticleRandom [
        0.6, [_radius * 0.35, _radius * 0.35, _radius * 0.15], [0, 0, 0], 0, 0, [0, 0, 0, 0], 0, 0
    ];
    
    _inner setDropInterval 0.016;
    
    // Emisor de glow
    _glow setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 2, 32, 0],
        "", "Billboard", 1, 1.8,
        [0, 0, 0], [0, 0, 0],
        0, 0.12, 0.1, 0,
        [0.06 * _radius, 0.12 * _radius, 0.06 * _radius],
        [
            [1, 1, 1, 0],
            [1, 1, 1, 1],
            [1, 1, 1, 0]
        ],
        [0.1], 1, 0, "", "", ""
    ];
    
    _glow setParticleRandom [
        2.5, [_radius * 0.6, _radius * 0.6, _radius * 0.25], [0.6, 0.6, 0.6], 0, 0, [0, 0, 0, 0], 0, 0
    ];
    
    _glow setDropInterval 0.04;
    
    // Luz
    _light setLightBrightness 0.6;
    _light setLightColor _color;
    _light setLightAmbient [_color select 0 * 0.5, _color select 1 * 0.5, _color select 2 * 0.5];
    _light setLightFlareSize 6;
    _light setLightFlareMaxDistance 250;
    _light setLightUseFlare true;
    
    // Sonido ambiental
    [_pos] spawn {
        params ["_soundPos"];
        while {true} do {
            playSound3D ["a3\sounds_f\environment\ambient\theme\jazzy1.wss", objNull, false, _soundPos, 0.3, 0.7, 100];
            sleep 12.5;
        };
    };
    
    // Retornar las fuentes
    [_outer, _inner, _glow, _light]
};

// ======================================================
// EFECTOS COMBINADOS PREDEFINIDOS
// ======================================================

// Explosión completa con todas las fases
fullExplosionSequence = {
    params [["_pos", [0,0,0], [[]]], ["_size", "medium", [""]]];
    
    // 1. Crear onda de choque más intensa
    [_pos, _size] call blastWaveConfigurable;
    sleep 0.05;
    
    // 2. Ejecutar una explosión completa
    [_pos, _size] call multiphasebuchedegatitoEffect;
    sleep 0.1;
    
    // 3. Añadir efecto de calor
    [_pos] call heatHazeEffect;
    sleep 0.2;
    
    // 4. Para tamaños grandes, añadir anillo de convergencia
    if (_size in ["large", "huge"]) then {
        [_pos] call bombRefractEffect;
    };
    
    // 5. Para tamaños pequeños, ejecutar fragmentos adicionales
    if (_size in ["tiny", "small"]) then {
        [_pos, "metal"] call createDebrisEffect;
    };
    
    true
};

// Efecto de impacto personalizado con fragmentos
createDebrisEffect = {
    params [["_pos", [0,0,0], [[]]], ["_type", "generic", [""]], ["_count", 5, [0]], ["_speed", 1, [0]]];
    
    // Crear objeto emisor
    private _particleSource = createSimpleObject ["Land_HelipadEmpty_F", AGLtoASL _pos, true];
    
    // Definir colores/texturas según tipo
    private _info = switch (_type) do {
        case "concrete": {
            ["#(argb,8,8,3)color(0.7,0.7,0.7,1)", 
             [[0.7,0.7,0.7,1],[0.4,0.4,0.4,0.6],[0,0,0,0]], 
             [0.25,0.2,0.15]]
        };
        case "wood": {
            ["#(argb,8,8,3)color(0.4,0.3,0.2,1)", 
             [[0.4,0.3,0.2,1],[0.2,0.15,0.1,0.7],[0,0,0,0]], 
             [0.3,0.25,0.15]]
        };
        case "metal": {
            ["#(argb,8,8,3)color(0.6,0.6,0.7,1)", 
             [[0.6,0.6,0.7,1],[0.4,0.4,0.5,0.7],[0,0,0,0]], 
             [0.22,0.18,0.12]]
        };
        case "glass": {
            ["#(argb,8,8,3)color(0.5,0.5,1,0.85)", 
             [[0.5,0.5,1,0.85],[0.2,0.2,0.5,0.5],[0,0,0,0]], 
             [0.2,0.15,0.1]]
        };
        case "flesh": {
            ["#(argb,8,8,3)color(0.5,0.1,0.1,1)", 
             [[0.5,0.1,0.1,1],[0.2,0.05,0.05,0.6],[0,0,0,0]], 
             [0.15,0.1,0.05]]
        };
        default {
            ["#(argb,8,8,3)color(0.7,0.7,0.7,1)", 
             [[0.7,0.7,0.7,1],[0.4,0.4,0.4,0.6],[0,0,0,0]], 
             [0.25,0.2,0.15]]
        };
    };
    
    _info params ["_tex", "_colors", "_sizes"];
    
    // Generar fragmentos con valores mejorados
    for "_i" from 0 to _count do {
        private _dir = random 360;
        private _angle = 30 + random 60;
        private _vel = [
            sin _dir * cos _angle * _speed * (0.95 + random 0.5),
            cos _dir * cos _angle * _speed * (0.95 + random 0.5),
            sin _angle * _speed * (0.95 + random 0.5)
        ];
        
        drop [
            [_tex, 1, 0, 1], 
            "", "Billboard", 
            1, 3.0 + random 1.8, 
            [0,0,0], _vel, 
            random 1.2, 0.6, 0.5, 0.12, 
            _sizes * PARTICLE_SIZE_MULT, 
            _colors, 
            [1.2], 0.25, 0.25, 
            "", "", _particleSource, random 360
        ];
    };
    
    // Eliminación retardada
    [_particleSource] spawn {
        params ["_source"];
        sleep 0.2;
        deleteVehicle _source;
    };
};

// === CHISPAS PARA EXPLOSIONES ===

// Función para añadir chispas a explosiones
addExplosionSparks = {
    params ["_pos", ["_scale", 1.2], ["_duration", 2]];
    
    // Crear fuente de partículas
    private _sparks = "#particlesource" createVehicleLocal _pos;
    _sparks setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 2, 32, 0], 
        "", "Billboard",
        1, 1.5, 
        [0, 0, 0.3 * _scale], 
        [0, 0, 1.2], 
        1, 0.2, 0.15, 0.05,
        [0.03, 0.015, 0.005],
        [
            [1, 1, 1, 1], 
            [1, 0.85, 0.5, 1], 
            [1, 0.65, 0.1, 0]
        ],
        [0.08], 1, 0, "", "", ""
    ];
    
    // Ajustes aleatorios para explosiones (más expansión)
    _sparks setParticleRandom [
        0.3,                                       // Tiempo de vida aleatorio
        [0.4 * _scale, 0.4 * _scale, 0.2 * _scale], // Posición aleatoria (más amplia)
        [1.2, 1.2, 2.4],                           // Velocidad aleatoria (más rápida)
        0, 0.05,                                   // Rotación
        [0, 0, 0, 0],                              // Color
        0, 0                                       // Otros parámetros
    ];
    
    // Muchas chispas para explosión
    _sparks setDropInterval 0.002;
    
    // Detener emisión después de tiempo breve
    [_sparks, _duration] spawn {
        params ["_source", "_time"];
        sleep 0.15; // Emisión muy breve de chispas
        _source setDropInterval 0.01; // Reducir cantidad
        sleep 0.3;
        _source setDropInterval 0.03; // Reducir más
        sleep _time - 0.45;
        deleteVehicle _source;
    };
    
    _sparks
};


// === CHISPAS PARA IMPACTOS DE BALAS ===

// Función para añadir chispas a impactos de bala
addBulletImpactSparks = {
    params ["_pos", ["_hitNormal", [0,0,1]], ["_surface", ""]];
    
    // Determinar escala y cantidad basado en superficie
    private _scale = 0.4; // Escala base más pequeña para balas
    private _density = 0.01; // Densidad estándar
    
    // Ajustar según superficie
    switch (toLower _surface) do {
        case "metal";
        case "metalgrid";
        case "metalplate": {
            _scale = 0.5;
            _density = 0.005; // Más chispas en metal
        };
        case "concrete";
        case "stone";
        case "rock": {
            _scale = 0.4;
            _density = 0.008; // Menos en piedra
        };
        case "wood";
        case "woodenfloor";
        case "softwood": {
            _scale = 0.3;
            _density = 0.02; // Pocas en madera
        };
        default {
            _scale = 0.35;
            _density = 0.015;
        };
    };
    
    // Crear fuente de partículas
    private _sparks = "#particlesource" createVehicleLocal _pos;
    _sparks setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 2, 32, 0], 
        "", "Billboard",
        1, 0.7, // Vida más corta para balas
        [0, 0, 0.05 * _scale], 
        [
            (_hitNormal select 0) * 0.7, 
            (_hitNormal select 1) * 0.7, 
            (_hitNormal select 2) * 0.7
        ], 
        1, 0.2, 0.15, 0.05,
        [0.015, 0.008, 0.002], // Tamaños más pequeños
        [
            [1, 1, 1, 1], 
            [1, 0.85, 0.5, 1], 
            [1, 0.65, 0.1, 0]
        ],
        [0.08], 1, 0, "", "", ""
    ];
    
    // Ajustes aleatorios para impactos de bala
    _sparks setParticleRandom [
        0.15, // Menos variación en tiempo de vida
        [0.05 * _scale, 0.05 * _scale, 0.05 * _scale], // Posición inicial más concentrada
        [0.5, 0.5, 0.3], // Velocidad aleatoria menor
        0, 0.05, // Rotación
        [0, 0, 0, 0], // Color
        0, 0 // Otros parámetros
    ];
    
    // Emisión breve de chispas
    _sparks setDropInterval _density;
    
    // Autolimpieza
    [_sparks] spawn {
        params ["_source"];
        sleep 0.1; // Emisión muy breve
        deleteVehicle _source;
    };
    
    _sparks
};

// Sistema completo para detectar impactos de bala
// Para usar, añade esto al inicio del script:
if (isNil "bulletImpactHandler") then {
    bulletImpactHandler = true;
    
    player addEventHandler ["Fired", {
        params ["_unit", "_weapon", "_muzzle", "_mode", "_ammo", "_magazine", "_projectile"];
        
        // Ignorar granadas, etc.
        if (_weapon == "Throw" || _weapon == "Put") exitWith {};
        
        // Seguir el proyectil
        [_projectile] spawn {
            params ["_bullet"];
            private _lastPos = getPosATL _bullet;
            private _isAlive = true;
            
            while {_isAlive} do {
                if (isNull _bullet) exitWith {_isAlive = false};
                private _curPos = getPosATL _bullet;
                if (_curPos isEqualTo _lastPos) then {
                    // El proyectil se detuvo, debe haber impactado
                    private _surfaceType = surfaceType (getPosATL _bullet);
                    private _normal = surfaceNormal (getPosATL _bullet);
                    [_curPos, _normal, _surfaceType] call addBulletImpactSparks;
                    _isAlive = false;
                };
                _lastPos = _curPos;
                sleep 0.01;
            };
        };
    }];
    
    // Alternativa: Un enfoque más eficiente usando EH de impacto (si está disponible)
    if (!isNil "BIS_fnc_addScriptedEventHandler") then {
        ["bulletImpact", {
            params ["_pos", "_dir", "_shooter", "_caliber", "_ammo", "_speed", "_surfaceType"];
            private _normal = surfaceNormal _pos;
            [_pos, _normal, _surfaceType] call addBulletImpactSparks;
        }] call BIS_fnc_addScriptedEventHandler;
    };
};


/*
    Efectos Ambientales para Explosiones
    Autor: BuchedegatitoSi
    Fecha: 2025-06-10
    
    - Árboles que caen con explosiones cercanas
    - Arbustos que se incendian con explosiones
*/

// Configuración general
#define TREE_FALL_RADIUS 15         // Radio en metros para detección de árboles
#define TREE_FALL_DAMAGE_MIN 0.5    // Daño mínimo para derribar árboles
#define BUSH_FIRE_RADIUS 20         // Radio para incendiar arbustos
#define BUSH_FIRE_CHANCE 0.7        // Probabilidad de que un arbusto se incendie
#define FIRE_DURATION_MIN 30        // Duración mínima del fuego (segundos)
#define FIRE_DURATION_MAX 60        // Duración máxima del fuego (segundos)

// Lista de clases de árboles comunes en Arma 3
#define TREE_CLASSES ["Land_Woods_pine_tall", "Land_Woods_Tree_pine_01", "Land_Woods_Tree_pine_02", "Land_t_picea1s_F", "Land_t_picea2s_F", "Land_t_picea3f_F", "Land_t_pinusN1s_F", "Land_t_pinusN2s_F", "Land_t_pinusS2f_F", "Land_t_poplar2f_dead_F", "t_fraxinus2s_F", "t_quercus2f_F", "t_quercus3f_F", "t_ficusB1s_F", "t_ficusB2s_F", "t_oleae1s_F", "t_oleae2s_F", "t_phoenixC1s_F", "t_phoenixC3s_F", "t_poplar1s_F", "t_poplar2s_F", "t_poplar3s_F", "b_ficusC1s_F", "b_ficusC2d_F", "b_neriumO2d_F", "b_neriumO2s_F", "b_phoenixC3s_F"]

// Lista de clases de arbustos/vegetación
#define BUSH_CLASSES ["Land_b_arundod2s_F", "Land_b_ficusC1s_F", "Land_b_ficusC2d_F", "Land_b_ficusC2s_F", "Land_b_neriumO2d_F", "Land_b_neriumO2s_F", "Land_b_phoenixC3s_F", "Land_c_Brush_Hard_EP1", "Land_c_Brush_Soft_EP1", "Land_c_fern", "Land_c_GrassBunch", "Land_c_GrassTall", "Land_c_leaves", "Land_c_MaxMoth", "Land_c_PlantsSmall1", "Land_c_PlantsSmall2", "Land_c_shrub", "Land_c_TreeSmall", "Land_clutter_grass_small", "Land_clutter_grass_tall"]

// Sistema de caída de árboles
fallTreesNearExplosion = {
    params ["_position", "_radius", "_damage"];
    
    // Buscar árboles cercanos
    private _nearTrees = nearestTerrainObjects [_position, ["TREE", "SMALL TREE"], _radius, false, true];
    
    // Si no hay árboles cercanos, terminar
    if (count _nearTrees == 0) exitWith {false};
    
    {
        private _tree = _x;
        
        // Calcular daño basado en distancia
        private _distance = _position distance _tree;
        private _relativeDamage = linearConversion [_radius, 0, _distance, 0, 1, true];
        
        // Si el daño relativo es suficiente, derribar el árbol
        if (_relativeDamage >= TREE_FALL_DAMAGE_MIN) then {
            // Calcular dirección de caída (alejándose de la explosión)
            private _treePos = getPosATL _tree;
            private _directionFromExplosion = [_position, _treePos] call BIS_fnc_dirTo;
            
            // Añadir un poco de aleatoriedad a la dirección
            _directionFromExplosion = _directionFromExplosion + (random 40) - 20;
            
            // Crear secuencia de caída de árbol
            [_tree, _treePos, _directionFromExplosion] spawn {
                params ["_treeObj", "_pos", "_dir"];
                
                // Efecto de sonido de árbol rompiéndose
                playSound3D ["A3\Sounds_F\sfx\objects\wood_crack_01.wss", _treeObj, false, _pos, 1.5, 1, 100];
                
                // Efecto de partículas de madera
                private _debris = "#particlesource" createVehicleLocal _pos;
                _debris setParticleParams [
                    ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 9, 1], 
                    "", "Billboard", 1, 2, 
                    [0, 0, 1], [0, 0, 1], 
                    0, 0.5, 0.3, 0.2, 
                    [0.5, 0.5], 
                    [[0.6, 0.5, 0.4, 1], [0.6, 0.5, 0.4, 0]], 
                    [1], 0, 0, "", "", _pos
                ];
                _debris setParticleRandom [0.5, [1, 1, 0.5], [0.5, 0.5, 0.5], 0, 0.5, [0, 0, 0, 0], 0, 0];
                _debris setDropInterval 0.05;
                
                // Simular movimiento de caída
                private _originalHeight = (getPosATL _treeObj) select 2;
                private _fallingTree = objNull;
                
                // Ocultar árbol original y crear uno caído
                _treeObj hideObjectGlobal true;
                
                // Determinar tipo de árbol y seleccionar modelo caído apropiado
                private _fallenTreeType = "Land_FallenTree_01_F"; // Modelo predeterminado
                
                // Intentar seleccionar un modelo más específico basado en el tipo de árbol
                private _treeType = typeOf _treeObj;
                
                if (_treeType in ["Land_t_picea1s_F", "Land_t_picea2s_F", "Land_t_picea3f_F"]) then {
                    _fallenTreeType = "Land_FallenPine_01_F";
                };
                
                if (_treeType in ["Land_t_pinusN1s_F", "Land_t_pinusN2s_F", "Land_t_pinusS2f_F"]) then {
                    _fallenTreeType = "Land_FallenPine_01_F";
                };
                
                if (_treeType in ["t_quercus2f_F", "t_quercus3f_F"]) then {
                    _fallenTreeType = "Land_FallenTree_01_F";
                };
                
                // Crear árbol caído
                _fallingTree = createVehicle [_fallenTreeType, _pos, [], 0, "CAN_COLLIDE"];
                _fallingTree setDir _dir;
                _fallingTree setPosATL _pos;
                
                // Esperar un momento antes de limpiar partículas
                sleep 2;
                deleteVehicle _debris;
                
                // Árbol permanecerá caído en la misión
            };
            
            // Pequeño retardo para evitar procesamiento simultáneo
            sleep 0.1;
        };
    } forEach _nearTrees;
    
    true
};

// Sistema de fuego en arbustos
createBushFiresNearExplosion = {
    params ["_position", "_radius"];
    
    // Buscar arbustos y vegetación cercana
    private _nearBushes = nearestTerrainObjects [_position, ["BUSH", "SMALL TREE", "HIDE"], _radius, false, true];
    
    // Filtrar para mantener solo ciertos tipos
    _nearBushes = _nearBushes select {typeOf _x in BUSH_CLASSES || {getText (configFile >> "CfgVehicles" >> typeOf _x >> "simulation") == "bush"}};
    
    // Si no hay arbustos cercanos, buscar objetos que podrían ser vegetación
    if (count _nearBushes == 0) then {
        _nearBushes = _position nearObjects ["NonStrategic", _radius];
        _nearBushes = _nearBushes select {typeOf _x in BUSH_CLASSES};
    };
    
    // Si sigue sin haber arbustos, terminar
    if (count _nearBushes == 0) exitWith {false};
    
    // Número de arbustos que se incendiarán (basado en densidad)
    private _numBushesToBurn = floor(random [1, 3, 5]);
    _numBushesToBurn = _numBushesToBurn min (count _nearBushes);
    
    // Seleccionar arbustos al azar para incendiar
    private _selectedBushes = [];
    for "_i" from 1 to _numBushesToBurn do {
        if (count _nearBushes > 0) then {
            private _idx = floor(random count _nearBushes);
            _selectedBushes pushBack (_nearBushes select _idx);
            _nearBushes deleteAt _idx;
        };
    };
    
    // Crear fuegos en los arbustos seleccionados
    {
        private _bush = _x;
        
        // Solo incendiar con cierta probabilidad
        if (random 1 < BUSH_FIRE_CHANCE) then {
            private _bushPos = getPosATL _bush;
            
            // Duración aleatoria del fuego
            private _fireDuration = random [FIRE_DURATION_MIN, (FIRE_DURATION_MIN + FIRE_DURATION_MAX) / 2, FIRE_DURATION_MAX];
            
            // Crear el efecto de fuego
            [_bushPos, _fireDuration] spawn {
                params ["_pos", "_duration"];
                
                // Crear fuego
                private _fire = "FirePlace_burning_F" createVehicle _pos;
                _fire setPosATL _pos;
                
                // Ajustar tamaño del fuego (más pequeño que el predeterminado)
                _fire setDamage 0.7;
                
                // Añadir humo
                private _smoke = "#particlesource" createVehicleLocal _pos;
                _smoke attachTo [_fire, [0, 0, 0.5]];
                _smoke setParticleParams [
                    ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 7, 48, 1],
                    "", "Billboard", 1, 15,
                    [0, 0, 0], [0, 0, 1.5], 1, 0.05, 0.04, 0.05,
                    [0.5, 2, 4],
                    [[0.5, 0.5, 0.5, 0.15], [0.75, 0.75, 0.75, 0.075], [1, 1, 1, 0]],
                    [0.125], 0.1, 0.05, "", "", _fire
                ];
                _smoke setParticleRandom [2, [0.25, 0.25, 0.5], [0.2, 0.2, 0.5], 0.5, 0.5, [0, 0, 0, 0.1], 0, 0, 0.1];
                _smoke setDropInterval 0.1;
                
                // Esperar la duración programada
                sleep _duration;
                
                // Apagar gradualmente
                _fire setDamage 0.9;
                sleep 3;
                deleteVehicle _smoke;
                sleep 2;
                deleteVehicle _fire;
            };
            
            // Pequeño retardo para evitar procesamiento simultáneo
            sleep 0.05;
        };
    } forEach _selectedBushes;
    
    true
};

// Detector de explosiones
if (isNil "environmentalEffectsActive") then {
    environmentalEffectsActive = true;
    
    // Event handler para detectar explosiones
    ["Explosion", {
        params ["_explosive", "_pos", "_velocity"];
        
        // Obtener información del explosivo
        private _ammoType = "";
        private _magnitude = 1;
        
        if (!isNull _explosive) then {
            _ammoType = typeOf _explosive;
            
            // Determinar magnitud basada en tipo de explosivo
            switch (true) do {
                // Granadas pequeñas
                case (_ammoType in ["GrenadeHand", "mini_Grenade"]): {
                    _magnitude = 0.6;
                };
                // RPGs y misiles pequeños
                case (_ammoType in ["R_PG32V_F", "M_NLAW_AT_F"]): {
                    _magnitude = 1.2;
                };
                // Explosivos y minas
                case (_ammoType in ["DemoCharge_Remote_Ammo", "SatchelCharge_Remote_Ammo", "ATMine_Range_Ammo"]): {
                    _magnitude = 1.5;
                };
                // Artillería y bombas aéreas
                case (_ammoType in ["Sh_82mm_AMOS", "Sh_155mm_AMOS", "Bo_Mk82"]): {
                    _magnitude = 2.0;
                };
                // Por defecto
                default {
                    _magnitude = 1.0;
                };
            };
        };
        
        // Verificar magnitud mínima para efectos
        if (_magnitude >= 0.5) then {
            // Derribar árboles
            [_pos, TREE_FALL_RADIUS * _magnitude, TREE_FALL_DAMAGE_MIN] spawn fallTreesNearExplosion;
            
            // Incendiar arbustos (solo para explosiones más grandes)
            if (_magnitude >= 1.0) then {
                [_pos, BUSH_FIRE_RADIUS * _magnitude] spawn createBushFiresNearExplosion;
            };
        };
    }] call BIS_fnc_addScriptedEventHandler;
    
    systemChat "";
};

// === ESTELAS DE MISILES Y RPGS ===

// Sistema de estela de misil
createMissileTrail = {
    params ["_projectile"];
    
    // Validar que sea un proyectil válido
    if (isNull _projectile) exitWith {};
    
    // Crear objeto auxiliar para seguir al proyectil
    private _trailHelper = "Land_HelipadEmpty_F" createVehicleLocal [0,0,0];
    _trailHelper attachTo [_projectile, [0,0,0]];
    
    // Crear estela de humo principal
    private _trailSmoke = "#particlesource" createVehicleLocal [0,0,0];
    _trailSmoke attachTo [_trailHelper, [0,-0.2,0]];
    
    _trailSmoke setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 7, 48, 1],
        "", "Billboard", 1, MISSILE_TRAIL_LIFE,
        [0, 0, 0], [0, 0, 0], 0, 0.05, 0.04, 0.025,
        [0.5 * MISSILE_TRAIL_SIZE, 1.5 * MISSILE_TRAIL_SIZE, 2.5 * MISSILE_TRAIL_SIZE],
        [
            [0.6, 0.6, 0.6, 0.2],
            [0.7, 0.7, 0.7, 0.15],
            [0.8, 0.8, 0.8, 0.1],
            [0.9, 0.9, 0.9, 0.05],
            [1, 1, 1, 0]
        ],
        [0.25, 0.5], 0.1, 0.1, "", "", _trailHelper
    ];
    
    _trailSmoke setParticleRandom [
        0.2, [0.05, 0.05, 0.05], [0.1, 0.1, 0.1], 0, 0.1, [0, 0, 0, 0], 0, 0
    ];
    
    _trailSmoke setDropInterval 0.005;
    
    // Crear humo denso cerca del motor
    private _engineSmoke = "#particlesource" createVehicleLocal [0,0,0];
    _engineSmoke attachTo [_trailHelper, [0,-0.1,0]];
    
    _engineSmoke setParticleParams [
        ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 7, 48, 1],
        "", "Billboard", 1, 0.6,
        [0, 0, 0], [0, 0, 0], 0, 0.05, 0.04, 0.05,
        [0.5 * MISSILE_TRAIL_SIZE, 1.2 * MISSILE_TRAIL_SIZE],
        [
            [0.1, 0.1, 0.1, 0.8],
            [0.3, 0.3, 0.3, 0.5],
            [0.5, 0.5, 0.5, 0.2],
            [0.7, 0.7, 0.7, 0]
        ],
        [0.5], 0.1, 0.1, "", "", _trailHelper
    ];
    
    _engineSmoke setParticleRandom [
        0.1, [0.02, 0.02, 0.02], [0.05, 0.05, 0.05], 0, 0.1, [0, 0, 0, 0], 0, 0
    ];
    
    _engineSmoke setDropInterval 0.01;
    
    // Sistema de chispas intermitentes
    [_projectile, _trailHelper] spawn {
        params ["_missile", "_helper"];
        
        while {!isNull _missile && alive _missile} do {
            // Generar chispas aleatoriamente
            if (random 1 < MISSILE_SPARK_CHANCE) then {
                private _sparkPos = getPosATL _helper;
                
                // Usar el mismo tipo de chispas que definimos antes
                private _sparks = "#particlesource" createVehicleLocal _sparkPos;
                _sparks setParticleParams [
                    ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 2, 32, 0], 
                    "", "Billboard",
                    1, 0.6, // Vida más corta
                    [0, 0, 0], 
                    [0, 0, 0], // Sin velocidad adicional
                    1, 0.2, 0.15, 0.05,
                    [0.03, 0.015, 0.005], // Tamaños pequeños
                    [
                        [1, 1, 1, 1], 
                        [1, 0.85, 0.5, 1], 
                        [1, 0.65, 0.1, 0]
                    ],
                    [0.08], 1, 0, "", "", ""
                ];
                
                _sparks setParticleRandom [
                    0.05, // Tiempo de vida aleatorio
                    [0.1, 0.1, 0.1], // Posición aleatoria
                    [0.2, 0.2, 0.2], // Velocidad aleatoria
                    0, 0.05, // Rotación
                    [0, 0, 0, 0], // Color
                    0, 0 // Otros parámetros
                ];
                
                _sparks setDropInterval 0.01;
                
                // Eliminar después de un breve momento
                [_sparks] spawn {
                    params ["_source"];
                    sleep 0.1;
                    deleteVehicle _source;
                };
            };
            
            // Comprobar si el misil está en vuelo
            if ((velocity _missile) isEqualTo [0,0,0]) then {
                // El misil probablemente ha impactado
                sleep 0.2;
                if ((velocity _missile) isEqualTo [0,0,0]) exitWith {};
            };
            
            sleep 0.05;
        };
        
        // Limpiar los recursos
        {
            detach _x;
            deleteVehicle _x;
        } forEach attachedObjects _helper;
        
        deleteVehicle _helper;
    };
};

// === EFECTOS AMBIENTALES PARA EXPLOSIONES ===

// Configuración general
#define TREE_FALL_RADIUS 15
#define TREE_FALL_DAMAGE_MIN 0.5
#define BUSH_FIRE_RADIUS 20
#define BUSH_FIRE_CHANCE 0.7
#define FIRE_DURATION_MIN 30
#define FIRE_DURATION_MAX 60

// Lista de clases de árboles comunes en Arma 3
#define TREE_CLASSES ["Land_Woods_pine_tall", "Land_Woods_Tree_pine_01", "Land_Woods_Tree_pine_02", "Land_t_picea1s_F", "Land_t_picea2s_F", "Land_t_picea3f_F", "Land_t_pinusN1s_F", "Land_t_pinusN2s_F", "Land_t_pinusS2f_F", "Land_t_poplar2f_dead_F", "t_fraxinus2s_F", "t_quercus2f_F", "t_quercus3f_F", "t_ficusB1s_F", "t_ficusB2s_F", "t_oleae1s_F", "t_oleae2s_F", "t_phoenixC1s_F", "t_phoenixC3s_F", "t_poplar1s_F", "t_poplar2s_F", "t_poplar3s_F", "b_ficusC1s_F", "b_ficusC2d_F", "b_neriumO2d_F", "b_neriumO2s_F", "b_phoenixC3s_F"]

// Lista de clases de arbustos/vegetación
#define BUSH_CLASSES ["Land_b_arundod2s_F", "Land_b_ficusC1s_F", "Land_b_ficusC2d_F", "Land_b_ficusC2s_F", "Land_b_neriumO2d_F", "Land_b_neriumO2s_F", "Land_b_phoenixC3s_F", "Land_c_Brush_Hard_EP1", "Land_c_Brush_Soft_EP1", "Land_c_fern", "Land_c_GrassBunch", "Land_c_GrassTall", "Land_c_leaves", "Land_c_MaxMoth", "Land_c_PlantsSmall1", "Land_c_PlantsSmall2", "Land_c_shrub", "Land_c_TreeSmall", "Land_clutter_grass_small", "Land_clutter_grass_tall"]

// Sistema de caída de árboles
fallTreesNearExplosion = {
    params ["_position", "_radius", "_damage"];
    
    // Buscar árboles cercanos
    private _nearTrees = nearestTerrainObjects [_position, ["TREE", "SMALL TREE"], _radius, false, true];
    
    // Si no hay árboles cercanos, terminar
    if (count _nearTrees == 0) exitWith {false};
    
    {
        private _tree = _x;
        
        // Calcular daño basado en distancia
        private _distance = _position distance _tree;
        private _relativeDamage = linearConversion [_radius, 0, _distance, 0, 1, true];
        
        // Si el daño relativo es suficiente, derribar el árbol
        if (_relativeDamage >= TREE_FALL_DAMAGE_MIN) then {
            // Calcular dirección de caída (alejándose de la explosión)
            private _treePos = getPosATL _tree;
            private _directionFromExplosion = [_position, _treePos] call BIS_fnc_dirTo;
            
            // Añadir un poco de aleatoriedad a la dirección
            _directionFromExplosion = _directionFromExplosion + (random 40) - 20;
            
            // Crear secuencia de caída de árbol
            [_tree, _treePos, _directionFromExplosion] spawn {
                params ["_treeObj", "_pos", "_dir"];
                
                // Efecto de sonido de árbol rompiéndose
                playSound3D ["A3\Sounds_F\sfx\objects\wood_crack_01.wss", _treeObj, false, _pos, 1.5, 1, 100];
                
                // Efecto de partículas de madera
                private _debris = "#particlesource" createVehicleLocal _pos;
                _debris setParticleParams [
                    ["\A3\data_f\ParticleEffects\Universal\Universal", 16, 9, 1], 
                    "", "Billboard", 1, 2, 
                    [0, 0, 1], [0, 0, 1], 
                    0, 0.5, 0.3, 0.2, 
                    [0.5, 0.5], 
                    [[0.6, 0.5, 0.4, 1], [0.6, 0.5, 0.4, 0]], 
                    [1], 0, 0, "", "", _pos
                ];
                _debris setParticleRandom [0.5, [1, 1, 0.5], [0.5, 0.5, 0.5], 0, 0.5, [0, 0, 0, 0.1], 0, 0];
                _debris setDropInterval 0.05;
                
                // Simular movimiento de caída
                private _originalHeight = (getPosATL _treeObj) select 2;
                private _fallingTree = objNull;
                
                // Ocultar árbol original y crear uno caído
                _treeObj hideObjectGlobal true;
                
                // Determinar tipo de árbol y seleccionar modelo caído apropiado
                private _fallenTreeType = "Land_FallenTree_01_F"; // Modelo predeterminado
                
                // Intentar seleccionar un modelo más específico basado en el tipo de árbol
                private _treeType = typeOf _treeObj;
                
                if (_treeType in ["Land_t_picea1s_F", "Land_t_picea2s_F", "Land_t_picea3f_F"]) then {
                    _fallenTreeType = "Land_FallenPine_01_F";
                };
                
                if (_treeType in ["Land_t_pinusN1s_F", "Land_t_pinusN2s_F", "Land_t_pinusS2f_F"]) then {
                    _fallenTreeType = "Land_FallenPine_01_F";
                };
                
                if (_treeType in ["t_quercus2f_F", "t_quercus3f_F"]) then {
                    _fallenTreeType = "Land_FallenTree_01_F";
                };
                
                // Crear árbol caído
                _fallingTree = createVehicle [_fallenTreeType, _pos, [], 0, "CAN_COLLIDE"];
                _fallingTree setDir _dir;
                _fallingTree setPosATL _pos;
                
                // Esperar un momento antes de limpiar partículas
                sleep 2;
                deleteVehicle _debris;
                
                // Árbol permanecerá caído en la misión
            };
            
            // Pequeño retardo para evitar procesamiento simultáneo
            sleep 0.1;
        };
    } forEach _nearTrees;
    
    true
};
